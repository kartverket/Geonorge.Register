///////////////////////////////////////////////////////////
//  CodelistValue.cs
//  Implementation of the Class CodelistValue
//  Generated by Enterprise Architect
//  Created on:      24-nov-2014 22:43:34
//  Original author: Tor Kjetil
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Kartverket.Register.Models.Translations;
using Resources;
using Kartverket.Register.Helpers;

namespace Kartverket.Register.Models
{
	public class CodelistValue : RegisterItem {
        public CodelistValue() 
        {
            this.narrowerItems = new HashSet<CodelistValue>();
            this.Translations = new TranslationCollection<CodelistValueTranslation>();
        }
        public const string DataDirectory = "codelistImport/";
        [Display(Name = "CodeValue", ResourceType = typeof(CodelistValues))]
        public string value { get; set; }

        [ForeignKey("broaderItem")]
        public Guid? broaderItemId { get; set; }
        [Display(Name = "BroaderItem", ResourceType = typeof(CodelistValues))]
        public virtual RegisterItem broaderItem { get; set; }

        [Display(Name = "NarrowerItems", ResourceType = typeof(CodelistValues))]
        public virtual ICollection<CodelistValue> narrowerItems { get; set; }

        public virtual TranslationCollection<CodelistValueTranslation> Translations { get; set; }

	    [Display(Name = "ValidFromDate", ResourceType = typeof(CodelistValues))]
	    [DataType(DataType.Date), DisplayFormat(DataFormatString = "{0:dd.MM.yyyy}", ApplyFormatInEditMode = true)]
	    public DateTime? ValidFromDate { get; set; }

	    [Display(Name = "ValidToDate", ResourceType = typeof(CodelistValues))]
	    [DataType(DataType.Date), DisplayFormat(DataFormatString = "{0:dd.MM.yyyy}", ApplyFormatInEditMode = true)]
	    public DateTime? ValidToDate { get; set; }

        public void AddMissingTranslations()
        {
            Translations.AddMissingTranslations();
        }

        public new string NameTranslated()
        {
            return base.NameTranslated();
        }

        public new string DescriptionTranslated()
        {
            return base.DescriptionTranslated();
        }

        public virtual string GetCodelistValueEditUrl()
        {
            if (register.parentRegister == null)
            {
                return "/kodeliste/" + register.seoname + "/" + submitter.seoname + "/" + seoname + "/rediger";
            }
            else {
                return "/kodeliste/" + register.parentRegister.seoname + "/" + register.owner.seoname + "/" + register.seoname + "/" + submitter.seoname + "/" + seoname + "/rediger";
            }
        }

        public virtual string GetCodelistValueDeleteUrl()
        {
            if (register.parentRegister == null)
            {
                return "/kodeliste/" + register.seoname + "/" + submitter.seoname + "/" + seoname + "/slett";
            }
            else {
                return "/kodeliste/" + register.parentRegister.seoname + "/" + register.owner.seoname + "/" + register.seoname + "/" + submitter.seoname + "/" + seoname + "/slett";
            }
        }

        public string GetImportUrl()
        {
            if (register.parentRegister != null)
            {
                return "/kodeliste/" + register.parentRegister.seoname + "/" + register.owner.seoname + "/" + register.seoname + "/ny/import";
            }
            else
            {
                return "/kodeliste/" + register.seoname + "/ny/import";
            }
        }

        internal void InitializeNewCodelistValue()
        {
            InitializeNew();
        }

	    public void Update(CodelistValue codelistValue)
	    {
            UpdateRegisterItem(codelistValue);

	        value = codelistValue.value;
	        ValidFromDate = codelistValue.ValidFromDate;
	        ValidToDate = codelistValue.ValidToDate;
            statusId = codelistValue.statusId;
	        dateAccepted = GetDateAccepted();
	        register.MakeAllItemsValid = statusId != "Valid";
	    }

	    private DateTime? GetDateAccepted()
	    {
	        if (dateAccepted == null && statusId == "Valid")
	        {
	            return DateTime.Now;
	        }
	        if (dateAccepted != null && statusId != "Valid")
	        {
	            return null;
	        }
	        return dateAccepted;
	    }
	}//end CodelistValue

}//end namespace Datamodell