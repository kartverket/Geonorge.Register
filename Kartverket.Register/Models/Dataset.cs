///////////////////////////////////////////////////////////
//  Dataset.cs
//  Implementation of the Class Dataset
//  Generated by Enterprise Architect
//  Created on:      24-nov-2014 22:43:36
//  Original author: Tor Kjetil
///////////////////////////////////////////////////////////

using System;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections;
using System.Web.Mvc;
using Resources;
using Kartverket.Register.Models.Translations;
using Kartverket.Register.Helpers;

namespace Kartverket.Register.Models
{
    public class Dataset : RegisterItem
    {

        public Dataset()
        {
            Coverage = new List<CoverageDataset>();
            this.Translations = new TranslationCollection<DatasetTranslation>();
        }

        //public int Id { get; set; }

        [Display(Name = "Uuid:")]
        public string Uuid { get; set; }

        [Required(ErrorMessageResourceType = typeof(DataSet), ErrorMessageResourceName = "DOK_OwnerRequired")]
        [ForeignKey("datasetowner")]
        [Display(Name = "DOK_Owner", ResourceType = typeof(DataSet))]
        public Guid datasetownerId { get; set; }
        public virtual Organization datasetowner { get; set; }

        [Display(Name = "DOK_Note", ResourceType = typeof(DataSet))]
        public string Notes { get; set; }

        [Display(Name = "DOK_SpecificUsage", ResourceType = typeof(DataSet))]
        public string SpecificUsage { get; set; }

        [Display(Name = "DOK_ProductSheetUrl", ResourceType = typeof(DataSet))]
        public string ProductSheetUrl { get; set; }

        [Display(Name = "DOK_PresentationRulesUrl", ResourceType = typeof(DataSet))]
        public string PresentationRulesUrl { get; set; }

        [Display(Name = "DOK_ProductSpecificationUrl", ResourceType = typeof(DataSet))]
        public string ProductSpecificationUrl { get; set; }

        [Display(Name = "Metadata url:")]
        public string MetadataUrl { get; set; }

        [Display(Name = "DOK_Distribusjonsformat", ResourceType = typeof(DataSet))]
        public string DistributionFormat { get; set; }

        [Display(Name = "DOK_DistributionUrl", ResourceType = typeof(DataSet))]
        public string DistributionUrl { get; set; }

        [Display(Name = "DOK_DistributionArea", ResourceType = typeof(DataSet))]
        public string DistributionArea { get; set; }

        [Display(Name = "WMS url:")]
        public string WmsUrl { get; set; }

        [Display(Name = "DOK_Temagruppe", ResourceType = typeof(DataSet))]
        [ForeignKey("theme")]
        public string ThemeGroupId { get; set; }
        public virtual DOKTheme theme { get; set; }

        [Display(Name = "DOK_Datasetthumbnail", ResourceType = typeof(DataSet))]
        public string datasetthumbnail { get; set; }

        [ForeignKey("dokStatus")]
        [Display(Name = "DOK-status:")]
        public string dokStatusId { get; set; }
        public virtual DokStatus dokStatus { get; set; }

        [Display(Name = "DOK_StatusDateAccepted", ResourceType = typeof(DataSet))]
        [DataType(DataType.Date), DisplayFormat(DataFormatString = @"{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime? dokStatusDateAccepted { get; set; }

        [Display(Name = "DOK_Kandidatdato", ResourceType = typeof(DataSet))]
        [DataType(DataType.Date), DisplayFormat(DataFormatString = @"{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime? Kandidatdato { get; set; } = new DateTime(DateTime.Now.Year, 1, 1);

        [Display(Name = "DOK_DatasetType", ResourceType = typeof(DataSet))]
        public string DatasetType { get; set; }

        public virtual List<CoverageDataset> Coverage { get; set; }

        //Dok delivery statuses
        //Metadata
        [ForeignKey("dokDeliveryMetadataStatus")]
        [Display(Name = "DOK_Delivery_Metadata", ResourceType = typeof(DataSet))]
        public string dokDeliveryMetadataStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryMetadataStatus { get; set; }
        public string dokDeliveryMetadataStatusNote { get; set; }
        public bool dokDeliveryMetadataStatusAutoUpdate { get; set; } = true;
        //ProductSheet
        [ForeignKey("dokDeliveryProductSheetStatus")]
        [Display(Name = "DOK_ProductSheetStatus", ResourceType = typeof(DataSet))]
        public string dokDeliveryProductSheetStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryProductSheetStatus { get; set; }
        public string dokDeliveryProductSheetStatusNote { get; set; }
        public bool dokDeliveryProductSheetStatusAutoUpdate { get; set; } = true;
        //PresentationRules
        [ForeignKey("dokDeliveryPresentationRulesStatus")]
        [Display(Name = "DOK_PresentationRulesStatus", ResourceType = typeof(DataSet))]
        public string dokDeliveryPresentationRulesStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryPresentationRulesStatus { get; set; }
        public string dokDeliveryPresentationRulesStatusNote { get; set; }
        public bool dokDeliveryPresentationRulesStatusAutoUpdate { get; set; } = true;
        //ProductSpecification
        [ForeignKey("dokDeliveryProductSpecificationStatus")]
        [Display(Name = "DOK_ProductSpecificationStatus", ResourceType = typeof(DataSet))]
        public string dokDeliveryProductSpecificationStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryProductSpecificationStatus { get; set; }
        public string dokDeliveryProductSpecificationStatusNote { get; set; }
        public bool dokDeliveryProductSpecificationStatusAutoUpdate { get; set; } = true;
        //WMS
        [ForeignKey("dokDeliveryWmsStatus")]
        [Display(Name = "DOK_Delivery_Wms", ResourceType = typeof(DataSet))]
        public string dokDeliveryWmsStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryWmsStatus { get; set; }
        public string dokDeliveryWmsStatusNote { get; set; }
        public bool dokDeliveryWmsStatusAutoUpdate { get; set; } = true;
        //WFS
        [ForeignKey("dokDeliveryWfsStatus")]
        [Display(Name = "DOK_Delivery_Wfs", ResourceType = typeof(DataSet))]
        public string dokDeliveryWfsStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryWfsStatus { get; set; }
        public string dokDeliveryWfsStatusNote { get; set; }
        public bool dokDeliveryWfsStatusAutoUpdate { get; set; } = true;
        //Distribution
        [ForeignKey("dokDeliveryDistributionStatus")]
        [Display(Name = "DOK_Delivery_Distribution", ResourceType = typeof(DataSet))]
        public string dokDeliveryDistributionStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryDistributionStatus { get; set; }
        public string dokDeliveryDistributionStatusNote { get; set; }
        public bool dokDeliveryDistributionStatusAutoUpdate { get; set; } = true;
        //SOSI requirements
        [ForeignKey("dokDeliverySosiRequirementsStatus")]
        [Display(Name = "DOK_Delivery_SosiRequirements", ResourceType = typeof(DataSet))]
        public string dokDeliverySosiRequirementsStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliverySosiRequirementsStatus { get; set; }
        public string dokDeliverySosiRequirementsStatusNote { get; set; }
        public bool dokDeliverySosiStatusAutoUpdate { get; set; } = true;
        //GML requirements
        [ForeignKey("dokDeliveryGmlRequirementsStatus")]
        [Display(Name = "DOK_Delivery_GmlRequirements", ResourceType = typeof(DataSet))]
        public string dokDeliveryGmlRequirementsStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryGmlRequirementsStatus { get; set; }
        public string dokDeliveryGmlRequirementsStatusNote { get; set; }
        public bool dokDeliveryGmlRequirementsStatusAutoUpdate { get; set; } = true;
        //Atom-feed
        [ForeignKey("dokDeliveryAtomFeedStatus")]
        [Display(Name = "DOK_Delivery_AtomFeed", ResourceType = typeof(DataSet))]
        public string dokDeliveryAtomFeedStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryAtomFeedStatus { get; set; }
        public string dokDeliveryAtomFeedStatusNote { get; set; }
        public bool dokDeliveryAtomFeedStatusAutoUpdate { get; set; } = true;

        public bool? restricted { get; set; }

        [Display(Name = "ServiceUuid", ResourceType = typeof(DataSet))]
        public string UuidService { get; set; }

        // DOK Suitability Rating

        [Display(Name = "Regionplan")]
        public int? RegionalPlan { get; set; }
        public string RegionalPlanNote { get; set; }

        [Display(Name = "kommuneplanens samfunnsdel")]
        public int? MunicipalSocialPlan { get; set; }
        public string MunicipalSocialPlanNote { get; set; }

        [Display(Name = "kommuneplanens arealdel")]
        public int? MunicipalLandUseElementPlan { get; set; }
        public string MunicipalLandUseElementPlanNote { get; set; }

        [Display(Name = "Reguleringsplan område")]
        public int? ZoningPlanArea { get; set; }
        public string ZoningPlanAreaNote { get; set; }

        [Display(Name = "Reguleringsplan detalj")]
        public int? ZoningPlanDetails { get; set; }
        public string ZoningPlanDetailsNote { get; set; }

        [Display(Name = "Byggesak")]
        public int? BuildingMatter { get; set; }
        public string BuildingMatterNote { get; set; }

        [Display(Name = "Fradeling")]
        public int? PartitionOff { get; set; }
        public string PartitionOffNote { get; set; }

        [Display(Name = "KU og ROS for pbl-planer")]
        public int? EenvironmentalImpactAssessment { get; set; }
        public string EenvironmentalImpactAssessmentNote { get; set; }

        public virtual TranslationCollection<DatasetTranslation> Translations { get; set; }
        public void AddMissingTranslations()
        {
            Translations.AddMissingTranslations();
        }

        public new string NameTranslated()
        {
            return base.NameTranslated();
        }

        public new string DescriptionTranslated()
        {
            return base.DescriptionTranslated();
        }
        public string ThemeGroupIdTranslated()
        {
            var cultureName = CultureHelper.GetCurrentCulture();

            var themeGroupIdTranslated = ThemeGroupId;
            themeGroupIdTranslated = this.Translations[cultureName]?.ThemeGroupId;

            if (string.IsNullOrEmpty(themeGroupIdTranslated))
            themeGroupIdTranslated = ThemeGroupId;

            return themeGroupIdTranslated;
        }

        public virtual string GetDatasetUrl()
        {
            return register.GetObjectUrl() + "/" + datasetowner.seoname + "/" + seoname;
        }

        public virtual string GetDatasetEditUrl()
        {
            if (register.parentRegister == null)
            {
                return "/dataset/" + register.seoname + "/" + datasetowner.seoname + "/" + seoname + "/rediger";
            }
            else {
                return "/dataset/" + register.parentRegister.seoname + "/" + register.owner.seoname + "/" + register.seoname + "/" + datasetowner.seoname + "/" + seoname + "/rediger";
            }
        }

        public virtual string GetDatasetDeleteUrl()
        {
            if (register.parentRegister == null)
            {
                return "/dataset/" + register.seoname + "/" + datasetowner.seoname + "/" + seoname + "/slett";
            }
            else {
                return "/dataset/" + register.parentRegister.seoname + "/" + register.owner.seoname + "/" + register.seoname + "/" + datasetowner.seoname + "/" + seoname + "/slett";
            }
        }

        public bool IsNationalDataset()
        {
            return DatasetType == "Nasjonalt";
        }

        public bool IsMunicipalDataset()
        {
            return DatasetType == "Kommunalt";
        }

        public string GetDokStatus()
        {
            if (dokStatusId == null)
            {
                if (IsMunicipalDataset())
                {
                    return "Accepted";
                }
                else
                {
                    return "Proposal";
                }
            }
            else {
                return dokStatusId;
            }
        }

        public DateTime? GetDokStatusDateAccepted()
        {        
            if (dokStatusId == "Accepted")
            {
                if (dokStatusDateAccepted == null)
                {
                    return DateTime.Now;
                }
            }
            return dokStatusDateAccepted;
        }


        public string GetDatasetType()
        {
            if (register.IsDokMunicipal())
            {
                return DataSet.TypeMunicipality;
            }
            else
            {
                return DataSet.TypeNational;
            }
        }

        public string GetDistributionUrl()
        {
            return DistributionUrl;
        }

        public string GetMetadataUrl()
        {
            return MetadataUrl;
        }

        public string GetPresentationRulesUrl()
        {
            return PresentationRulesUrl;
        }

        public string GetProductSheetUrl()
        {
            return ProductSheetUrl;
        }

        public string GetProductSpecificationUrl()
        {
            return ProductSpecificationUrl;
        }

        public string GetWmsUrl()
        {
            return WmsUrl;
        }

        public string GetDistributionFormat()
        {
            return DistributionFormat;
        }

        public string GetDistributionArea()
        {
            return DistributionArea;
        }

        public string GetNotes()
        {
            return Notes;
        }

        public string GetThemeGroupId()
        {
            return ThemeGroupId;
        }

        public string Getdatasetthumbnail()
        {
            return datasetthumbnail;
        }

        public bool GetCoverageConfirmedByUser(Guid municipalityId) {
            foreach (CoverageDataset coverage in Coverage)
            {
                if (coverage.MunicipalityId == municipalityId)
                {
                    return coverage.ConfirmedDok;
                }
            }
            return false;
        }

        public bool GetCoverageByUser(Guid municipalityId)
        {
            foreach (CoverageDataset coverage in Coverage)
            {
                if (coverage.MunicipalityId == municipalityId)
                {
                    return coverage.Coverage;
                }
            }
            return false;
        }

        public string GetCoverageNoteByUser(Guid municipalityId)
        {
            if (IsNationalDataset())
            {
                foreach (CoverageDataset coverage in Coverage)
                {
                    if (coverage.MunicipalityId == municipalityId)
                    {
                        return coverage.Note;
                    }
                }
                return null;
            }
            else {
                return Notes;
            }
        }

        public bool GetCoverageRegionalPlaneByUser(Guid municipalityId) {
            foreach (CoverageDataset coverage in Coverage)
            {
                if (coverage.MunicipalityId == municipalityId)
                {
                    return coverage.RegionalPlan;
                }
            }
            return false;
        }

        public bool GetCoverageMunicipalSocialPlanByUser(Guid municipalityId)
        {
            foreach (CoverageDataset coverage in Coverage)
            {
                if (coverage.MunicipalityId == municipalityId)
                {
                    return coverage.MunicipalSocialPlan;
                }
            }
            return false;
        }

        public bool GetCoverageMunicipalLandUseElementPlanByUser(Guid municipalityId)
        {
            foreach (CoverageDataset coverage in Coverage)
            {
                if (coverage.MunicipalityId == municipalityId)
                {
                    return coverage.MunicipalLandUseElementPlan;
                }
            }
            return false;
        }

        public bool GetCoverageZoningPlanAreaByUser(Guid municipalityId)
        {
            foreach (CoverageDataset coverage in Coverage)
            {
                if (coverage.MunicipalityId == municipalityId)
                {
                    return coverage.ZoningPlanArea;
                }
            }
            return false;
        }

        public bool GetCoverageZoningPlanDetailsByUser(Guid municipalityId)
        {
            foreach (CoverageDataset coverage in Coverage)
            {
                if (coverage.MunicipalityId == municipalityId)
                {
                    return coverage.ZoningPlanDetails;
                }
            }
            return false;
        }

        public bool GetCoverageBuildingMatterByUser(Guid municipalityId)
        {
            foreach (CoverageDataset coverage in Coverage)
            {
                if (coverage.MunicipalityId == municipalityId)
                {
                    return coverage.BuildingMatter;
                }
            }
            return false;
        }

        public bool GetCoveragePartitionOffByUser(Guid municipalityId)
        {
            foreach (CoverageDataset coverage in Coverage)
            {
                if (coverage.MunicipalityId == municipalityId)
                {
                    return coverage.PartitionOff;
                }
            }
            return false;
        }

        public bool GetCoverageEenvironmentalImpactAssessmentByUser(Guid municipalityId)
        {
            foreach (CoverageDataset coverage in Coverage)
            {
                if (coverage.MunicipalityId == municipalityId)
                {
                    return coverage.EenvironmentalImpactAssessment;
                }
            }
            return false;
        }

        public string GetCoverageSuitabilityAssessmentTextByUser(Guid municipalityId)
        {
            foreach (CoverageDataset coverage in Coverage)
            {
                if (coverage.MunicipalityId == municipalityId)
                {
                    return coverage.suitabilityAssessmentText;
                }
            }
            return null;
        }

        public CoverageDataset GetCoverageByOwner(Guid owner)
        {
            foreach (CoverageDataset coverage in Coverage)
            {
                if (coverage.MunicipalityId == owner)
                {
                    return coverage;
                }
            }
            return null;
        }

        

        internal IEnumerable SuitabilityScale()
        {
            return new List<SelectListItem>
            {
                new SelectListItem { Selected = true, Text = "0", Value = "0"},
                new SelectListItem { Selected = false, Text = "1", Value = "1"},
                new SelectListItem { Selected = false, Text = "2", Value = "2"},
                new SelectListItem { Selected = false, Text = "3", Value = "3"},
                new SelectListItem { Selected = false, Text = "4", Value = "4"},
                new SelectListItem { Selected = false, Text = "5", Value = "5"},
            };
        }

        public string ItemsByDatasetOwnerUrl()
        {
            return register.GetObjectUrl() + "/" + datasetowner.seoname;
        }
    }//end Dataset

}//end namespace Datamodell