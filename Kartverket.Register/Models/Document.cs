///////////////////////////////////////////////////////////
//  Document.cs
//  Implementation of the Class Document
//  Generated by Enterprise Architect
//  Created on:      24-nov-2014 22:43:38
//  Original author: Tor Kjetil
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity;
using System.Web;
using Kartverket.Register.Helpers;
using Resources;
using Kartverket.Register.Models.Translations;

namespace Kartverket.Register.Models
{
    public class Document : RegisterItem
    {
        public Document()
        {
            this.Translations = new TranslationCollection<DocumentTranslation>();
        }
        // logos will be stored in this directory
        public const string DataDirectory = "documents/";

        [Display(Name = "Thumbnail", ResourceType = typeof(Documents))]
        public string thumbnail { get; set; }
        [Display(Name = "DocumentOwner", ResourceType = typeof(Documents))]
        [ForeignKey("documentowner")]
        public Guid documentownerId { get; set; }
        public virtual Organization documentowner { get; set; }

        public virtual TranslationCollection<DocumentTranslation> Translations { get; set; }
        public void AddMissingTranslations()
        {
            Translations.AddMissingTranslations();
        }

        public new string NameTranslated()
        {
            return base.NameTranslated();
        }

        public new string DescriptionTranslated()
        {
            return base.DescriptionTranslated();
        }

        public virtual string GetDocumentUrl()
        {
            if (register.parentRegisterId == Guid.Empty || register.parentRegister == null)
            {
                if (documentowner == null && seoname == null)
                    return "/register/versjoner/" + register.seoname;
                else
                    return "/" + register.seoname + "/" + seoname;
            }
            else
            {
                return "/" + register.path + "/" + seoname;
            }
        }

        public virtual string GetDocumentEditUrl()
        {
            if (register.parentRegister == null)
            {
                return "/dokument/" + register.seoname + "/" + documentowner.seoname + "/" + seoname + "/rediger";
            }
            else
            {
                return "/dokument/" + register.parentRegister.seoname + "/" + register.owner.seoname + "/" + register.seoname + "/" + documentowner.seoname + "/" + seoname + "/rediger";
            }
        }

        public virtual string GetDocumentDeleteUrl()
        {
            if (register.parentRegister == null)
            {
                return "/dokument/" + register.seoname + "/" + documentowner.seoname + "/" + seoname + "/slett";
            }
            else
            {
                return "/dokument/" + register.parentRegister.seoname + "/" + register.owner.seoname + "/" + register.seoname + "/" + documentowner.seoname + "/" + seoname + "/slett";
            }
        }

        internal bool isCurrentVersion()
        {
            if (seoname == "breutstrekning-for-perioden-1999-2006")
            {
                var test = status.description;
            }
            if (versioning != null)
            {
                return systemId == versioning.currentVersion;
            }
            return false;
        }

        public string ItemsByDocumentOwnerUrl()
        {
            return register.GetObjectUrl() + "?filterOrganization=" + documentowner.seoname;
        }

        public void Update(Document document)
        {
            systemId = document.systemId;
            name = document.name;
            seoname = RegisterUrls.MakeSeoFriendlyString(name);
            modified = DateTime.Now;
            description = document.description;
            approvalDocument = document.approvalDocument;
            approvalReference = document.approvalReference;
            UmlModelTreeStructureLink = document.UmlModelTreeStructureLink;
            ApplicationSchema = document.ApplicationSchema;
            GMLApplicationSchema = document.GMLApplicationSchema;
            CartographyFile = document.CartographyFile;
            CartographyDetailsUrl = document.CartographyDetailsUrl;
            versionName = document.versionName;
            versionNumber = document.versionNumber;
            Accepted = document.Accepted;
            documentownerId = document.documentownerId;
            submitterId = document.submitterId;
            versioningId = document.versioningId;
            documentUrl = document.documentUrl;
            documentUrl2 = document.documentUrl2;
            documentUrlSchematron = document.documentUrlSchematron;
            if(!string.IsNullOrEmpty(document.thumbnail))
                thumbnail = document.thumbnail;

        }


        private string SaveFileToDisk(HttpPostedFileBase file, string name, string register, int vnr)
        {
            string filtype;
            string seofilename = RegisterUrls.MakeSeoFriendlyDocumentName(file, out filtype, out seofilename);

            string filename = register + "_" + name + "_v" + vnr + "_" + seofilename + "." + filtype;
            var path = Path.Combine("", filename);
            file.SaveAs(path);
            return filename;
        }

        public DateTime? GetDateRetired()
        {
            return DateRetired ?? DateTime.Now;
        }

        public DateTime? GetDateAccepted()
        {
            return dateAccepted ?? DateTime.Now;
        }

        public void SetStatusSuperseded()
        {
            statusId = "Superseded";

            if (dateSuperseded == null)
            {
                dateSuperseded = DateTime.Now;
            }
        }

        public void SetDocumentAsRetired()
        {
            statusId = "Retired";

            if (DateRetired == null)
            {
                DateRetired = DateTime.Now;
            }
            dateAccepted = GetDateAccepted();
        }

        public bool IsAccepted()
        {
            return Accepted == true;
        }

        public bool IsNotAccepted()
        {
            return Accepted == false;
        }

        public bool IsCurrentVersion()
        {
            return versioning.currentVersion == systemId;
        }

        public bool IsRetired()
        {
            return statusId == "Retired";
        }

        public bool StatusIsValidOrSosiValid()
        {
            return statusId == "Valid" || statusId == "Sosi-valid";
        }

        public bool IsStandard()
        {
            return register.seoname == "standarder" || register.path.StartsWith("standarder");
        }
    }//end Document
}//end namespace Datamodell