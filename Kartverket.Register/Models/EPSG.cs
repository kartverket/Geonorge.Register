///////////////////////////////////////////////////////////
//  EPSG.cs
//  Implementation of the Class EPSG
//  Generated by Enterprise Architect
//  Created on:      24-nov-2014 22:43:42
//  Original author: Tor Kjetil
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using Kartverket.Register.Models.Translations;
using Resources;
using Kartverket.Register.Helpers;

namespace Kartverket.Register.Models
{
	public class EPSG : RegisterItem {
        public EPSG()
        {
            this.Translations = new TranslationCollection<EPSGTranslation>();
        }
        [Display(Name = "EPSG:")]
        public string epsgcode { get; set; }
        [Display(Name = "SosiReferencesystem", ResourceType = typeof(EPSGs))]
        public string sosiReferencesystem { get; set; }
        [Display(Name = "ExternalReference", ResourceType = typeof(EPSGs))]
        public string externalReference { get; set; }
        [ForeignKey("inspireRequirement")]
        [Display(Name = "InspireRequirement", ResourceType = typeof(EPSGs))]
        public string inspireRequirementId { get; set; }
        [Display(Name = "InspireRequirement", ResourceType = typeof(EPSGs))]
        public virtual Requirement inspireRequirement { get; set; }
        [Display(Name = "InspireRequirementDescription", ResourceType = typeof(EPSGs))]
        public string inspireRequirementDescription { get; set; }
        [ForeignKey("nationalRequirement")]
        [Display(Name = "NationalRequirement", ResourceType = typeof(EPSGs))]
        public string nationalRequirementId { get; set; }
        [Display(Name = "NationalRequirement", ResourceType = typeof(EPSGs))]
        public virtual Requirement nationalRequirement { get; set; }
        [Display(Name = "NationalRequirementDescription", ResourceType = typeof(EPSGs))]
        public string nationalRequirementDescription { get; set; }
        [ForeignKey("nationalSeasRequirement")]
        [Display(Name = "NationalSeasRequirement", ResourceType = typeof(EPSGs))]
        public string nationalSeasRequirementId { get; set; }
        [Display(Name = "NationalSeasRequirement", ResourceType = typeof(EPSGs))]
        public virtual Requirement nationalSeasRequirement { get; set; }
        [Display(Name = "NationalSeasRequirementDescription", ResourceType = typeof(EPSGs))]
        public string nationalSeasRequirementDescription { get; set; }

        [Display(Name = "VerticalReferenceSystem", ResourceType = typeof(EPSGs))]
        public string verticalReferenceSystem { get; set; }
        [Display(Name = "HorizontalReferenceSystem", ResourceType = typeof(EPSGs))]
        public string horizontalReferenceSystem { get; set; }
        [Display(Name = "Dimension", ResourceType = typeof(EPSGs))]
        [ForeignKey("dimensionId")]
        public virtual Dimension dimension { get; set; }
        [Display(Name = "Dimension", ResourceType = typeof(EPSGs))]
        public string dimensionId { get; set; }
        public virtual TranslationCollection<EPSGTranslation> Translations { get; set; }

        public void AddMissingTranslations()
        {
            Translations.AddMissingTranslations();
        }

        public new string NameTranslated()
        {
            return base.NameTranslated();
        }

        public new string DescriptionTranslated()
        {
            return base.DescriptionTranslated();
        }

        public string InspireRequirementDescriptionTranslated()
        {
            var cultureName = CultureHelper.GetCurrentCulture();

            var inspireRequirementDescriptionTranslated = Translations[cultureName]?.InspireRequirementDescription;
            if (string.IsNullOrEmpty(inspireRequirementDescriptionTranslated))
                inspireRequirementDescriptionTranslated = inspireRequirementDescription;
            return inspireRequirementDescriptionTranslated;
        }
        

        public virtual string GetEPSGEditUrl()
        {
            if (register.parentRegister == null)
            {
                return "/epsg/" + register.seoname + "/" + submitter.seoname + "/" + seoname + "/rediger";
            }
            else {
                return "/epsg/" + register.parentRegister.seoname + "/" + register.owner.seoname + "/" + register.seoname + "/" + submitter.seoname + "/" + seoname + "/rediger";
            }
        }

        public virtual string GetEPSGDeleteUrl()
        {
            if (register.parentRegister == null)
            {
                return "/epsg/" + register.seoname + "/" + submitter.seoname + "/" + seoname + "/slett";
            }
            else {
                return "/epsg/" + register.parentRegister.seoname + "/" + register.owner.seoname + "/" + register.seoname + "/" + submitter.seoname + "/" + seoname + "/slett";
            }
        }

	    public string DimensionDescription()
	    {
	        if (dimension != null)
	        {
	            return dimension.DescriptionTranslated();
	        }
	        return Registers.NotSet;
	    }
	}//end EPSG

}//end namespace Datamodell