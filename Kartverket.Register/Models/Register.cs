///////////////////////////////////////////////////////////
//  Register.cs
//  Implementation of the Class Register
//  Generated by Enterprise Architect
//  Created on:      24-nov-2014 22:43:51
//  Original author: Tor Kjetil
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using Kartverket.Register.Models.Translations;
using Resources;
using Kartverket.Register.Helpers;

namespace Kartverket.Register.Models
{
    public class Register
    {
        private const string _geodatalovStatusRegister = "Geodatalov statusregister";
        private readonly Guid _inspireStatusRegister = Guid.Parse("9A9BEF28-285B-477E-85F1-504F8227FF45");
        private readonly Guid _dokStatusRegister = Guid.Parse("CD429E8B-2533-45D8-BCAA-86BC2CBDD0DD");
        private const string _DetOffentligeKartgrunnlagetKommunalt = "Det offentlige kartgrunnlaget - Kommunalt";

        public Register()
        {
            this.RegisterItems = new HashSet<RegisterItemV2>();
            this.items = new HashSet<RegisterItem>();
            this.subregisters = new HashSet<Register>();
            this.replaces = new HashSet<Version>();
            this.Translations = new TranslationCollection<RegisterTranslation>();
            Synchronizes = new HashSet<Synchronize>();
        }
        [Key]
        public Guid systemId { get; set; }
        public virtual ICollection<Version> replaces { get; set; }
        [ForeignKey("owner")]
        public Guid? ownerId { get; set; }
        [Display(Name = "Owner", ResourceType = typeof(Registers))]
        public virtual Organization owner { get; set; }
        [ForeignKey("manager")]
        public Guid? managerId { get; set; }
        public virtual Organization manager { get; set; }
        [Display(Name = "Name", ResourceType = typeof(Registers))]
        public string name { get; set; }
        [Display(Name = "Description", ResourceType = typeof(Registers))]
        public string description { get; set; }
        [ForeignKey("status")]
        public string statusId { get; set; }
        public virtual Status status { get; set; }
        [DataType(DataType.Date), DisplayFormat(DataFormatString = @"{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime dateSubmitted { get; set; }
        [DataType(DataType.Date), DisplayFormat(DataFormatString = @"{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime modified { get; set; }
        [DataType(DataType.Date), DisplayFormat(DataFormatString = @"{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime? dateAccepted { get; set; }

        [Required(ErrorMessageResourceType = typeof(Registers), ErrorMessageResourceName = "ContainedItemClassErrorMessage")]
        [Display(Name = "ContainedItemClass", ResourceType = typeof(Registers))]
        public string containedItemClass { get; set; }

        public virtual ICollection<RegisterItem> items { get; set; }
        public virtual ICollection<RegisterItemV2> RegisterItems { get; set; }
        [ForeignKey("parentRegister")]
        public Guid? parentRegisterId { get; set; }
        public virtual Register parentRegister { get; set; }
        public virtual ICollection<Register> subregisters { get; set; }
        [Url]
        public string targetNamespace { get; set; }
        public string seoname { get; set; }
        [StringLength(450)]
        public string pathOld { get; set; }
        [StringLength(450)]
        public string path { get; set; }
        [ForeignKey("versioning")]
        public Guid? versioningId { get; set; }
        public virtual Version versioning { get; set; }
        public int versionNumber { get; set; }

        [ForeignKey("access")]
        public int? accessId { get; set; }
        public virtual accessType access { get; set; }

        [Display(Name = "MakeAllItemsValid", ResourceType = typeof(Registers))]
        public bool MakeAllItemsValid { get; set; }

        [Display(Name = "MakeAllItemsRetired", ResourceType = typeof(Registers))]
        public bool MakeAllItemsRetired { get; set; }

        public virtual TranslationCollection<RegisterTranslation> Translations { get; set; }

        public virtual ICollection<Synchronize> Synchronizes { get; set; }

        public void AddMissingTranslations()
        {
            Translations.AddMissingTranslations();
        }

        public string NameTranslated()
        {
            var cultureName = CultureHelper.GetCurrentCulture();
            var nameTranslated = Translations[cultureName]?.Name;
            if (string.IsNullOrEmpty(nameTranslated))
                nameTranslated = name;
            return nameTranslated;
        }

        public string DescriptionTranslated()
        {
            var cultureName = CultureHelper.GetCurrentCulture();
            var descriptionTranslated = Translations[cultureName]?.Description;
            if (string.IsNullOrEmpty(descriptionTranslated))
                descriptionTranslated = description;
            return descriptionTranslated;
        }

        /// <summary>
        /// Gets Url to current object
        /// </summary>
        /// <returns>Url</returns>
        public virtual string GetObjectUrl()
        {
            return path != null
                ? "/" + path
                : "/" + pathOld;
        }

        public bool IsAlertRegister()
        {
            return systemId == Guid.Parse(GlobalVariables.AlertRegistryId);
        }

        public bool IsOfTypeDataset()
        {
            return containedItemClass == "Dataset";
        }

        public bool IsDokMunicipal()
        {
            return systemId == Guid.Parse(GlobalVariables.DokMunicipalRegistryId);
        }

        public Guid GetSystemId()
        {
            return systemId == Guid.Empty ? Guid.NewGuid() : systemId;
        }

        public string GetDokMunicipalityUrl()
        {
            return "/det-offentlige-kartgrunnlaget-kommunalt";
        }

        public bool IsInspireStatusRegister()
        {
            return systemId == Guid.Parse(GlobalVariables.InspireRegistryId);
        }

        public bool IsDokStatusRegister()
        {
            return systemId == Guid.Parse(GlobalVariables.DokRegistryId);
        }

        public bool IsGeodatalovStatusRegister()
        {
            return systemId == Guid.Parse(GlobalVariables.GeodatalovRegistryId);
        }

        public bool IsMareanoStatusRegister()
        {
            return systemId == Guid.Parse(GlobalVariables.MareanoRegistryId);
        }

        public bool ContainedItemClassIsOrganization()
        {
            return containedItemClass == "Organization";
        }

        public bool ContainedItemClassIsCodelistValue()
        {
            return containedItemClass == "CodelistValue";
        }

        public bool ContainedItemClassIsRegister()
        {
            return containedItemClass == "Register";
        }

        public bool ContainedItemClassIsDocument()
        {
            return containedItemClass == "Document";
        }

        public bool ContainedItemClassIsDataset()
        {
            return containedItemClass == "Dataset";
        }

        public bool ContainedItemClassIsEpsg()
        {
            return containedItemClass == "EPSG";
        }

        public bool ContainedItemClassIsNameSpace()
        {
            return containedItemClass == "NameSpace";
        }

        public bool ContainedItemClassIsAlert()
        {
            return containedItemClass == "Alert";
        }

        public bool ContainedItemClassIsInspireDataset()
        {
            return containedItemClass == "InspireDataset";
        }

        public bool ContainedItemClassIsGeodatalovDataset()
        {
            return containedItemClass == "GeodatalovDataset";
        }

        public string GetObjectCreateUrl(string municipalityCode = null)
        {
            var url = parentRegister == null
                ? seoname + "/ny"
                : parentRegister.seoname + "/" + owner.seoname + "/" + seoname + "/ny";

            if (ContainedItemClassIsDocument()) return "/dokument/" + url;
            if (ContainedItemClassIsCodelistValue()) return "/kodeliste/" + url;
            if (ContainedItemClassIsRegister()) return "/subregister/" + url;
            if (ContainedItemClassIsOrganization()) return "/organisasjoner/" + url;
            if (ContainedItemClassIsEpsg()) return "/epsg/" + url;
            if (ContainedItemClassIsNameSpace()) return "/navnerom/" + url;
            if (ContainedItemClassIsAlert()) return "/varsler/" + url;
            if (ContainedItemClassIsInspireDataset()) return "/inspire/" + url;
            if (ContainedItemClassIsGeodatalovDataset()) return "/geodatalov/" + url;
            if (ContainedItemClassIsDataset())
            {
                if (IsDokMunicipal()) return "/dataset/" + seoname + "/" + municipalityCode + "/ny";
                return "/dataset/" + url;
            }
            return "#";
        }

        public string GetEditObjectUrl()
        {
            return parentRegister == null
                ? "/rediger/" + seoname
                : "/subregister/" + parentRegister.seoname + "/" + owner.seoname + "/" + seoname + "/rediger";
        }


        
        public bool CannotChangeName()
        {
            // TODO alle skal sjekke på systemId
            return systemId == _inspireStatusRegister ||
                   name == _geodatalovStatusRegister ||
                   name == _DetOffentligeKartgrunnlagetKommunalt;
        }

        public bool RegisterAccessAdminAndEditor()
        {
            return accessId is 2;
        }

        public bool RegisterAccessAdminMunicipalUserDokEditorAndDocAdmin()
        {
            return accessId is 4;
        }

        public bool TooManySynchronizationJobsDataset()
        {
            return Synchronizes.Where(s => s.Active && s.ItemType == "Datasett").Count(s => s.Active) >= 1;
        }

        public bool TooManySynchronizationJobsServices()
        {
            return Synchronizes.Where(s => s.Active && s.ItemType == "Tjenester").Count(s => s.Active) >= 1;
        }

        public bool RedirectToNewPath(string requestPath)
        {
            var newPath = GetObjectUrl();
            return requestPath != newPath;
        }

        public int NumberOfCurrentVersions(Organization organization = null)
        {
            int number = 0;
            foreach (var item in items)
            {
                if (item is Document document)
                {
                    if (organization != null && (document.isCurrentVersion() && organization.number == document.documentowner.number))
                    {
                        number++;
                    }
                    else if (organization == null && document.isCurrentVersion())
                    {
                        number++;
                    }
                }
                else
                {
                    number++;
                }
            }
            return number;
        }
    }
}