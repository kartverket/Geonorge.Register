<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessLabel" xml:space="preserve">
    <value>Access to the registry</value>
  </data>
  <data name="AccessText" xml:space="preserve">
    <value>Applies to access to suggest, change and delete own registry entries. Admin always has full access</value>
  </data>
  <data name="Content" xml:space="preserve">
    <value>Content</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DOKCoverageContent" xml:space="preserve">
    <value>The coverage map shows which datasets in the public map of the map are covered by the various municipalities.</value>
  </data>
  <data name="Hits" xml:space="preserve">
    <value>hits</value>
  </data>
  <data name="HitsDisplay" xml:space="preserve">
    <value>Showing</value>
  </data>
  <data name="HitsOf" xml:space="preserve">
    <value>of</value>
  </data>
  <data name="Kartografi" xml:space="preserve">
    <value>Cartography – specifications (SLD)</value>
  </data>
  <data name="KartografiContent" xml:space="preserve">
    <value>Norwegian NSDI register of cartography definitions – SLD and other formats</value>
  </data>
  <data name="LoadingMessage" xml:space="preserve">
    <value>Retrieves register</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NotSet" xml:space="preserve">
    <value>Not set</value>
  </data>
  <data name="Objektregisteret" xml:space="preserve">
    <value>Feature Catalogue</value>
  </data>
  <data name="ObjektregisteretContent" xml:space="preserve">
    <value>Norwegian NSDI Feature Catalogue with UML-models and definitions</value>
  </data>
  <data name="Owner" xml:space="preserve">
    <value>Owner</value>
  </data>
  <data name="SymbolContent" xml:space="preserve">
    <value>Norwegian NSDI register of pictograms and symbols used in cartography</value>
  </data>
  <data name="Updated" xml:space="preserve">
    <value>Updated</value>
  </data>
  <data name="Submitter" xml:space="preserve">
    <value>Submitter</value>
  </data>
  <data name="Propose" xml:space="preserve">
    <value>Propose</value>
  </data>
  <data name="ContainedItemClass" xml:space="preserve">
    <value>Legal content</value>
  </data>
  <data name="VersionNumber" xml:space="preserve">
    <value>Version number</value>
  </data>
  <data name="EditList" xml:space="preserve">
    <value>Edit list</value>
  </data>
  <data name="Accepted" xml:space="preserve">
    <value>Accepted</value>
  </data>
  <data name="ApprovalDocument" xml:space="preserve">
    <value>Appoval text</value>
  </data>
  <data name="ApprovalReference" xml:space="preserve">
    <value>Approval reference</value>
  </data>
  <data name="Current" xml:space="preserve">
    <value>Current</value>
  </data>
  <data name="DateAccepted" xml:space="preserve">
    <value>Date accepted</value>
  </data>
  <data name="DateNotAccepted" xml:space="preserve">
    <value>Date draft</value>
  </data>
  <data name="DateRetired" xml:space="preserve">
    <value>Date retired</value>
  </data>
  <data name="DateSuperseded" xml:space="preserve">
    <value>Date superseded</value>
  </data>
  <data name="DeleteConfirm" xml:space="preserve">
    <value>Are you sure you want to delete</value>
  </data>
  <data name="Draft" xml:space="preserve">
    <value>Draft</value>
  </data>
  <data name="Historical" xml:space="preserve">
    <value>Historical</value>
  </data>
  <data name="Proposal" xml:space="preserve">
    <value>Proposal</value>
  </data>
  <data name="Retired" xml:space="preserve">
    <value>Retired</value>
  </data>
  <data name="Superseded" xml:space="preserve">
    <value>Superseded</value>
  </data>
  <data name="VersionName" xml:space="preserve">
    <value>Version name</value>
  </data>
  <data name="SuggestNewRegister" xml:space="preserve">
    <value>Suggest a new register</value>
  </data>
  <data name="SuggestNewRegisterIn" xml:space="preserve">
    <value>Suggest a new register in</value>
  </data>
  <data name="ContainedItemClassErrorMessage" xml:space="preserve">
    <value>Legitimate content for the registry must be added</value>
  </data>
  <data name="ErrorMessageDelete" xml:space="preserve">
    <value>The registry can not be deleted because it contains items that need to be deleted first!</value>
  </data>
  <data name="ErrorMessageValidationName" xml:space="preserve">
    <value>The value already exists!</value>
  </data>
  <data name="Publish" xml:space="preserve">
    <value>Publish</value>
  </data>
  <data name="NewVersion" xml:space="preserve">
    <value>New version</value>
  </data>
  <data name="SuggestNewVersionOf" xml:space="preserve">
    <value>Suggest new version of</value>
  </data>
  <data name="DocumentUrl" xml:space="preserve">
    <value>Document url</value>
  </data>
  <data name="SavingContentMessage" xml:space="preserve">
    <value>Saving content</value>
  </data>
  <data name="Etat" xml:space="preserve">
    <value>Agency</value>
  </data>
  <data name="AccessAdmin" xml:space="preserve">
    <value>Only the administrator should have access to this registry</value>
  </data>
  <data name="AccessEditor" xml:space="preserve">
    <value>Editor is allowed to propose, change and delete own registry entries (status can only be changed by administrator)</value>
  </data>
  <data name="DateSubmitted" xml:space="preserve">
    <value>Date submitted</value>
  </data>
  <data name="Modified" xml:space="preserve">
    <value>Last changed</value>
  </data>
  <data name="StatusAvailable" xml:space="preserve">
    <value>Possible statuses</value>
  </data>
  <data name="Valid" xml:space="preserve">
    <value>Valid</value>
  </data>
  <data name="MakeAllItemsValid" xml:space="preserve">
    <value>Set status "Valid" on all codelist values</value>
  </data>
  <data name="MakeAllItemsValidMessage" xml:space="preserve">
    <value>Set status of all values in code list. Individual values can still be set</value>
  </data>
  <data name="None" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="SymbolName" xml:space="preserve">
    <value>Cartography - symbols</value>
  </data>
  <data name="GroupCodeLists" xml:space="preserve">
    <value>Code lists</value>
  </data>
  <data name="GroupDatamodelsAndStandards" xml:space="preserve">
    <value>Data models and standards</value>
  </data>
  <data name="GroupDocumentRegistry" xml:space="preserve">
    <value>Document registers</value>
  </data>
  <data name="GroupStatusAndReporting" xml:space="preserve">
    <value>Status and reporting</value>
  </data>
  <data name="GroupSymbolAndCartography" xml:space="preserve">
    <value>Symbols and cartography</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="MakeAllItemsRetired" xml:space="preserve">
    <value>Set status "Retired" on all codelist values</value>
  </data>
  <data name="MakeAllItemsRetiredMessage" xml:space="preserve">
    <value>Set status of all values in code list. Individual values can still be set</value>
  </data>
  <data name="TransliterNorwegian" xml:space="preserve">
    <value>Transliter æøå to eoa in url path</value>
  </data>
  <data name="MakeAllItemsDraft" xml:space="preserve">
    <value>Set status "Draft" for all code values</value>
  </data>
  <data name="MakeAllItemsDraftMessage" xml:space="preserve">
    <value>Set status of all values in code list. Individual values can still be set</value>
  </data>
  <data name="Definition" xml:space="preserve">
    <value>Definition</value>
  </data>
  <data name="DocumentUrl2" xml:space="preserve">
    <value>Url to document</value>
  </data>
</root>