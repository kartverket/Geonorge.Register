@using Kartverket.Register.Helpers
@using Kartverket.Register.Models
@model Kartverket.Register.Models.Alert
@using Kartverket.Register.Resources
﻿@using Kartverket.Register.Helpers
<script src="https://uicdn.toast.com/editor/2.5.2/toastui-editor-all.js"></script>
<!-- Editor's Dependecy Style -->
<link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/codemirror.min.css" />
<!-- Editor's Style -->
<link rel="stylesheet" href="https://uicdn.toast.com/editor/2.5.2/toastui-editor.css" />
@{
    ViewBag.Title = Shared.Edit + " " + Model.UuidExternal;
}

@section breadcrumb {
    <li>@Shared.Edit</li>
}

<section class="heading">
    <div class="row">
        <div class="col-sm-12">
            <h2>
                @Shared.Edit @Model.UuidExternal
            </h2>
        </div>
        <div class="col-sm-12">
            <span class="separator-lg"></span>
        </div>
    </div>
</section>

@using (Html.BeginForm("Edit", "Alerts", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
<div class="form-horizontal">
    @Html.ValidationSummary(false, Shared.ValidationSummary, new { @class = "alert alert-danger" })
    @Html.HiddenFor(model => model.systemId)
    @Html.HiddenFor(model => model.AlertCategory)

    @if (ViewBag.UuidExternal != null && ViewBag.UuidExternal.Items.Count == 1)
    {
        <div class="form-group required has-feedback">
            @Html.LabelFor(model => model.UuidExternal, Alerts.AppliesTo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-9">
                <div class="col-md-6 row">
                    <input type="text" name="UuidExternal" value="@Model.UuidExternal" />
                    <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
                </div>
                <div class="col-md-12 row">
                    <p class="help-text bg-success" id="help-text-uuid" style="display: none">
                        @Alerts.HelpTextUuidOperation
                    </p>
                </div>
            </div>
            <div class="col-sm-1 pull-right">
                <p class="form-control-static">
                    <a href="#" data-help-text-id="help-text-uuid" class="badge help-text-toggle">?</a>
                </p>
            </div>
        </div>
    }
    else
    {
        <div class="form-group required has-feedback">
            @Html.LabelFor(model => model.UuidExternal, Alerts.AppliesTo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-9">
                <div class="col-md-6 row">
                    @Html.DropDownList("UuidExternal", null, Alerts.Select, htmlAttributes: new { @class = "form-control" })
                    <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
                </div>
                <div class="col-md-12 row">
                    <p class="help-text bg-success" id="help-text-uuid" style="display: none">
                        @Alerts.HelpTextUuid
                    </p>
                </div>
            </div>
            <div class="col-sm-1 pull-right">
                <p class="form-control-static">
                    <a href="#" data-help-text-id="help-text-uuid" class="badge help-text-toggle">?</a>
                </p>
            </div>
        </div>
    }

    @Html.Hidden("Type", Registers.NotSet)
    <div class="form-group required has-feedback">
        @Html.LabelFor(model => model.AlertType, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-9">
            <div class="col-md-6 row">
                @Html.DropDownList("AlertType", null, Alerts.Select, htmlAttributes: new { @class = "form-control" })
                <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
            </div>
            <div class="col-md-12 row">
                <p class="help-text bg-success" id="help-text-alerttype" style="display: none">
                    @Html.Raw(Alerts.HelpTextAlerttype)
                </p>
            </div>
        </div>
        <div class="col-sm-1 pull-right">
            <p class="form-control-static">
                <a href="#" data-help-text-id="help-text-alerttype" class="badge help-text-toggle">?</a>
            </p>
        </div>
    </div>

    @Html.Hidden("Owner", Registers.NotSet)

    <div class="form-group required has-feedback">
        @Html.LabelFor(model => model.AlertDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-9">
            <div class="col-md-5 row">
                @Html.TextBoxFor(m => m.AlertDate, "{0:yyyy-MM-ddTHH:mm:ss}", new { @class = "form-control", type = "datetime-local" })
                @Html.ValidationMessageFor(m => m.AlertDate, "", new { @class = "text-danger" })
                <span class="field-validation-valid" id="AlertDate_validationMessage">@Alerts.AlertDateValidationMessage</span>
                <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
            </div>
            <div class="col-md-12 row">
                <p class="help-text bg-success" id="help-text-alertdate" style="display: none">
                    @Alerts.HelpTextAlertdate
                </p>
            </div>
        </div>
        <div class="col-sm-1 pull-right">
            <p class="form-control-static">
                <a href="#" data-help-text-id="help-text-alertdate" class="badge help-text-toggle">?</a>
            </p>
        </div>
    </div>

    <div class="form-group required has-feedback">
        @Html.LabelFor(model => model.EffectiveDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-9">
            <div class="col-md-5 row">
                @Html.TextBoxFor(m => m.EffectiveDate, "{0:yyyy-MM-ddTHH:mm:ss}", new { @class = "form-control", type = "datetime-local" })
                @Html.ValidationMessageFor(m => m.EffectiveDate, "", new { @class = "text-danger" })
                <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
            </div>
            <div class="col-md-12 row">
                <p class="help-text bg-success" id="help-text-effectivedate" style="display: none">
                    @Alerts.HelpTextEffectivedate
                </p>
            </div>
        </div>
        <div class="col-sm-1 pull-right">
            <p class="form-control-static">
                <a href="#" data-help-text-id="help-text-effectivedate" class="badge help-text-toggle">?</a>
            </p>
        </div>
    </div>

    <div class="form-group required has-feedback">
        @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-9">
            <div class="col-md-12 row">
                @Html.TextAreaFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
            </div>
            <div class="col-md-12 row">
                <p class="help-text bg-success" id="help-text-note" style="display: none">
                    @Alerts.HelpTextNote
                </p>
            </div>
        </div>
        <div class="col-sm-1 pull-right">
            <p class="form-control-static">
                <a href="#" data-help-text-id="help-text-note" class="badge help-text-toggle">?</a>
            </p>
        </div>
    </div>

    @for (int t = 0; t < Model.Translations.Count; t++)
    {
        @Html.HiddenFor(m => Model.Translations[t].CultureName)
        <div class="form-group">
            @Html.LabelFor(m => Model.Translations[t].Note, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => Model.Translations[t].Note, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => Model.Translations[t].Note)
            </div>
        </div>
    }

    @if (ViewBag.Category == @Constants.AlertCategoryOperation)
    {
        <div class="form-group has-feedback">
            <label for="tags" class="control-label col-md-2">@Alerts.Tags</label>
            <div class="col-md-9">
                <div class="col-md-6 row">
                    @Html.DropDownList("tagsList", (MultiSelectList)ViewBag.tagList, new { multiple = "multiple", @class = "form-control" })
                    <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
                </div>
                <div class="col-md-12 row">
                    <p class="help-text bg-success" id="help-text-tag" style="display: none">
                        @Alerts.TagsHelp
                    </p>
                </div>
            </div>
            <div class="col-sm-1 pull-right">
                <p class="form-control-static">
                    <a href="#" data-help-text-id="help-text-tag" class="badge help-text-toggle">?</a>
                </p>
            </div>
        </div>
        <div class="form-group has-feedback">
            @Html.LabelFor(model => model.department, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-9">
                <div class="col-md-6 row">
                    @Html.DropDownList("departmentId", null, Alerts.Select, htmlAttributes: new { @class = "form-control" })
                    <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
                </div>
                <div class="col-md-12 row">
                    <p class="help-text bg-success" id="help-text-departement" style="display: none">
                        @Alerts.DepartmentHelp
                    </p>
                </div>
            </div>
            <div class="col-sm-1 pull-right">
                <p class="form-control-static">
                    <a href="#" data-help-text-id="help-text-departement" class="badge help-text-toggle">?</a>
                </p>
            </div>
        </div>
        <div class="form-group has-feedback">
            <label for="statusId" class="control-label col-md-2">Status</label>
            <div class="col-md-9">
                <div class="col-md-6 row">
                    @Html.DropDownList("statusId", null, null, htmlAttributes: new { @class = "form-control" })
                    <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
                </div>
                <div class="col-md-12 row">
                    <p class="help-text bg-success" id="help-text-state" style="display: none">
                        @Alerts.StatusHelp
                    </p>
                </div>
            </div>
            <div class="col-sm-1 pull-right">
                <p class="form-control-static">
                    <a href="#" data-help-text-id="help-text-state" class="badge help-text-toggle">?</a>
                </p>
            </div>
        </div>

        <div class="form-group has-feedback">
            @Html.LabelFor(model => model.station, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-9">
                <div class="col-md-6 row">
                    <select name="StationName" class="form-control">
                        <option></option>
                        <optgroup label="SATREF"></optgroup>
                        @foreach (var station in (List<Station>)ViewBag.stations)
                        {
                            if (station.StationType == "SATREF")
                            {
                                <option value="@station.StationName,@station.StationType" @(Model.StationName == station.StationName && Model.StationType == station.StationType ? "selected" : "")>@station.Description</option>
                            }
                        }
                        <optgroup label="Vannstandsmåler"></optgroup>
                        @foreach (var station in (List<Station>)ViewBag.stations)
                        {
                            if (station.StationType == "Vannstandsmåler")
                            {
                        <option value="@station.StationName,@station.StationType" @(Model.StationName == station.StationName && Model.StationType == station.StationType ? "selected" : "")>@station.Description</option>
                            }
                        }
                    </select>
                    <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
                </div>
                <div class="col-md-12 row">
                    <p class="help-text bg-success" id="help-text-station" style="display: none">
                        @Alerts.StationHelp
                    </p>
                </div>
            </div>
            <div class="col-sm-1 pull-right">
                <p class="form-control-static">
                    <a href="#" data-help-text-id="help-text-station" class="badge help-text-toggle">?</a>
                </p>
            </div>
        </div>

        <div class="form-group has-feedback">
            @Html.LabelFor(model => model.Link, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-9">
                <div class="col-md-6 row">
                    @Html.EditorFor(model => model.Link)
                    <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
                </div>
                <div class="col-md-12 row">
                    <p class="help-text bg-success" id="help-text-link" style="display: none">
                        @Alerts.LinkHelp
                    </p>
                </div>
            </div>
            <div class="col-sm-1 pull-right">
                <p class="form-control-static">
                    <a href="#" data-help-text-id="help-text-link" class="badge help-text-toggle">?</a>
                </p>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Image1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="imagefile1" />@Model.Image1
                @Html.ValidationMessageFor(model => model.Image1, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Image2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="imagefile2" />@Model.Image2
                @Html.ValidationMessageFor(model => model.Image2, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Summary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.Summary)
                @Html.ValidationMessageFor(model => model.Summary, "", new { @class = "text-danger" })
                <div id="editorSummary"></div>
                <script>

                let hiddenBodyMarkdownSummary = document.querySelector("#Summary");
                let onEditorUpdateSummary = () => {
                    hiddenBodyMarkdownSummary.value = editorSummary.getMarkdown();
                                }

                                var contentSummary = [
                                @{
                                    string[] commentLines = new string[] { };
                                    if (Model.Summary != null)
                                    {
                                        commentLines = Model.Summary.Split('\n');
                                    }
                                    foreach (var comment in commentLines)
                                    {
                                        @:'@comment.Replace("\r", "")',
                                    }
                                }
                                ].join('\n');
                const editorSummary = new toastui.Editor({
                    el: document.querySelector('#editorSummary'),
                                    height: '150px',
                    events: { "change": onEditorUpdateSummary },
                    initialValue: contentSummary,
                                    initialEditType: 'wysiwyg'
                                });
                </script>
            </div>
        </div>
        <div class="form-group has-feedback">
            @Html.LabelFor(model => model.DateResolved, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-9">
                <div class="col-md-4 row">
                    <input type="datetime-local" class="form-control" value="@(Model.DateResolved.HasValue ? Model.DateResolved.Value.ToString("yyyy-MM-ddTHH:mm:ss") : "")" name="DateResolved" />
                    <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
                </div>
                <div class="col-md-12 row">
                    <p class="help-text bg-success" id="help-text-dateresolved" style="display: none">
                    </p>
                </div>
            </div>
            <div class="col-sm-1 pull-right">
                <p class="form-control-static">
                    <a href="#" data-help-text-id="help-text-dateresolved" class="badge help-text-toggle">?</a>
                </p>
            </div>
        </div>
    }
    <div class="form-group">
        <hr />
        <input type="submit" value="@Shared.Save" class="btn btn-default pull-right" />
        <a href="/varsler/@Model.seoname/@Model.systemId">@Shared.Back</a>
    </div>
</div>
}