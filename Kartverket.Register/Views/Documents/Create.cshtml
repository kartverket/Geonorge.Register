@model Kartverket.Register.Models.Document
﻿@using Kartverket.Register.Helpers
@using System.Web.Configuration
@using Kartverket.Register.Helpers

@{
    ViewBag.Title = Documents.TitleCreate;
}

@section breadcrumb {
    <li>@Documents.TitleCreate</li>
}

<section class="heading">
    <div class="row">
        <div class="col-sm-12">
            <h2>
                @Documents.TitleCreate
            </h2>
        </div>
        <div class="col-sm-12">
            <span class="separator-lg"></span>
        </div>
    </div>
</section>

<form action="@Request.Url.LocalPath" method="post" enctype="multipart/form-data">
    <input type="hidden" value="@Model.register.systemId" id="registerId" name="registerId" />
    @if (Model.register.parentRegister != null)
    {
        <input type="hidden" value="@Model.register.parentRegister.seoname" id="parentRegister" name="parentRegister" />
    }
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessage("ErrorMessage")
            </div>
        </div>

        @for (int t = 0; t < Model.Translations.Count; t++)
        {
            @Html.HiddenFor(m => Model.Translations[t].CultureName)
            <div class="form-group">
                @Html.LabelFor(m => Model.Translations[t].Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => Model.Translations[t].Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => Model.Translations[t].Name)
                </div>
            </div>
        }

        <div class="form-group">
            @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
            </div>
        </div>

        @for (int t = 0; t < Model.Translations.Count; t++)
        {
            @Html.HiddenFor(m => Model.Translations[t].CultureName)
            <div class="form-group">
                @Html.LabelFor(m => Model.Translations[t].Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => Model.Translations[t].Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => Model.Translations[t].Description)
                </div>
            </div>
        }

        <div class="form-group">
            @Html.LabelFor(model => model.versionName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.versionName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.versionName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.documentownerId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("documentownerId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.documentownerId, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model.register.name == "Tegneregler")
        {
            <div class="form-group">
                @Html.LabelFor(model => model.CartographyFile, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <select id="CartographyFile" name="CartographyFile" class="form-control" onchange="SetCartographyDetailsUrl(this.value);"></select>
                    @Html.HiddenFor(model => model.CartographyDetailsUrl)
                    @Html.ValidationMessageFor(model => model.CartographyFile, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        <div class="form-group">
            <label class="control-label col-md-2" for="documentfile">@Documents.DocumentFile:</label>
            <div class="col-md-10">
                <input type="file" name="documentfile" id="documentfile" />
                @Html.ValidationMessage("FileName", new { @class = "text-danger" })
                @Html.ValidationMessage("ErrorMessageFileName")
                <input type="checkbox" name="zipIsAsciiDoc" id="zipIsAsciiDoc" value="1"/><label for="zipIsAsciiDoc">&nbsp;Zip er AsciiDoc</label>
            </div>
        </div>
        <div class="form-group@(Model.register.seoname == "gml-applikasjonsskjema" ? " hidden" :"")">
            <label class="control-label col-md-2" for="documentfileEnglish">@Documents.DocumentFileEnglish:</label>
            <div class="col-md-10">
                <input type="file" name="documentfileEnglish" id="documentfileEnglish" />
                @Html.ValidationMessage("FileNameEnglish", new { @class = "text-danger" })
                @Html.ValidationMessage("ErrorMessageFileNameEnglish")
                <input type="checkbox" name="zipIsAsciiDocEnglish" id="zipIsAsciiDocEnglish" value="1"/><label for="zipIsAsciiDocEnglish">&nbsp;Zip er AsciiDoc</label>
            </div>
        </div>
        <div class="form-group@(Model.register.seoname != "gml-applikasjonsskjema" ? " hidden" :"")"">
            <label class="control-label col-md-2" for="schematronfile">Schematron-fil:</label>
            <div class="col-md-10">
                <input type="file" name="schematronfile" id="schematronfile" />
                @Html.ValidationMessage("FileName", new { @class = "text-danger" })
                @Html.ValidationMessage("ErrorMessageFileName")
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.documentUrl2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.documentUrl2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.documentUrl2, "", new { @class = "text-danger" })
            </div>
        </div>
                <div class="form-group">
                    <label class="control-label col-md-2">@Registers.DocumentUrlAttachment</label>
                </div>
                <div class="form-group">
                    <label for="DocumentUrlAttachments[0].Url" class="control-label col-md-2">Url</label>
                    <div class="col-md-4">
                        <input type="text" value="" name="DocumentUrlAttachments[0].Url" id="DocumentUrlAttachments[0].Url" />
                    </div>
                    <label for="DocumentUrlAttachments[0].Text" class="control-label col-md-2">@Shared.Title</label>
                    <div class="col-md-4">
                        <input type="text" value="" name="DocumentUrlAttachments[0].Text" id="DocumentUrlAttachments[0].Text" />
                    </div>
                </div>
                <div id="new-attachments">
                </div>
                <div>
                    <div class="form-group">
                        <div class="col-md-2"></div>
                        <div class="col-md-2"> <input type="button" value="Nytt vedlegg" onclick="addAttachment();" /></div>
                    </div>
                </div>
                <script>
                    var counter = @(Model.DocumentUrlAttachments != null ? Model.DocumentUrlAttachments.Count() : 1);
                    function addAttachment() {
                        document.getElementById("new-attachments").innerHTML +=
                            '<div class="form-group">' +
                        '<label for="DocumentUrlAttachments['+counter+'].Url" class="control-label col-md-2">Url</label>' +
                        '<div class="col-md-4">' +
                        '<input type="text" name="DocumentUrlAttachments[' + counter + '].Url" id="DocumentUrlAttachments[' + counter + '].Url" />' +
                        '</div > ' +
                            '<label for= "DocumentUrlAttachments['+counter+'].Text" class= "control-label col-md-2" >@Shared.Title</label > ' +
                            '<div class="col-md-4" > ' +
                            '<input type = "text" name = "DocumentUrlAttachments['+counter+'].Text" id = "DocumentUrlAttachments['+counter+'].Text" /> ' +
                        '</div > ' +
                    '</div>';
                        counter++;
                    }
                </script>
        <div class="form-group">
            @Html.LabelFor(model => model.thumbnail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="thumbnail" />
                @Html.ValidationMessageFor(model => model.thumbnail, "", new { @class = "text-danger" })
                @Documents.ThumbnailInfo
            </div>
        </div>
    </div>
    <div class="form-group">
        <hr />
        <input type="submit" value="@Registers.Propose" class="btn btn-default pull-right" />
        <a href="@Model.register.GetObjectUrl()">@Shared.Back</a>
    </div>
</form>
<script>
    var cartographyFiles;

    function GetCartographyFiles()
    {
        $.getJSON("@WebConfigurationManager.AppSettings["RegistryCartographyUrl"]api/kartografi", function(result){

            cartographyFiles = result;

            $('#CartographyFile').append(new Option("Vennligst velg", "" ));

            $.each(cartographyFiles, function(i, obj) {
                var dataText = obj.DatasetName + ': ' + obj.Name;
                var dataValue = obj.FileUrl;
                $('#CartographyFile').append(new Option(dataText, dataValue ));
            });

        });
    }

    function SetCartographyDetailsUrl(value)
    {
        console.log(value);
        selectedCartograhyUrl = value;

        var checkedFile = false;

        $.each(cartographyFiles, function(i, obj) {

            if(obj.FileUrl == selectedCartograhyUrl)
                $('#CartographyDetailsUrl').val('@WebConfigurationManager.AppSettings["RegistryCartographyUrl"]files/Details?SystemId=' + obj.Uuid);      
        });
    }

    GetCartographyFiles();
</script>
