@model Kartverket.Register.Models.Document
﻿@using Kartverket.Register.Helpers
@using System.Web.Configuration
@using System.Web.UI.WebControls
@using Kartverket.Register.Helpers

@{
    ViewBag.Title = Shared.Edit + " " + Model.name;

    string DocumentUrlAttachmentsUrl = "";
    string DocumentUrlAttachmentsText = "";

    if (Model.DocumentUrlAttachments != null && Model.DocumentUrlAttachments.Count > 0)
    {
        DocumentUrlAttachmentsUrl = Model.DocumentUrlAttachments.FirstOrDefault().Url;
        DocumentUrlAttachmentsText = Model.DocumentUrlAttachments.FirstOrDefault().Text;
    }
}
@section Scripts {
<script>
    //$(document).ready(function () {
    //    $('.date').datepicker({ dateFormat: "dd/mm/yy" });
    //});

    window.onload = init();

    function init()
    {
        if (document.getElementById('accepted').checked == true) {
            document.getElementById('cbRetired').hidden = false;
            enable();
        }
        if (document.getElementById('not-accepted').checked == true) {
            document.getElementById('cbRetired').hidden = false;
            disable();
        }
        if (document.getElementById('accepted').checked == false && document.getElementById('not-accepted').checked == false) {
            document.getElementById('cbRetired').hidden = true;
            disable();
        }

        if ((document.getElementById('accepted').checked == true || document.getElementById('not-accepted').checked == true) && '@Model.statusId' != "Superseded") {
            document.getElementById('cbRetired').hidden = false;
        }

        if ('@Model.statusId' == "Retired" || '@Model.statusId' == "Superseded") {
            document.getElementById('accepted').disabled == true;
            document.getElementById('not-accepted').disabled == true;
        }
    }

    function disable() {
        document.getElementById('approvalDate').hidden = true;
        document.getElementById('approvalDoc').hidden = true;
        document.getElementById('approvalRef').hidden = true;
        if (document.getElementById('accepted').checked == false && document.getElementById('not-accepted').checked == false) {
            document.getElementById('NotAcceptedate').hidden = true;
        }
        else{
            document.getElementById('NotAcceptedate').hidden = false;
        }

        var sosiinfo = document.getElementById('sosiinfo');
        if (typeof (sosiinfo) != 'undefined' && sosiinfo != null) {
            document.getElementById('sosiinfo').hidden = true;
        }
    }

    function enable() {
        document.getElementById('approvalDate').hidden = false;
        document.getElementById('approvalDoc').hidden = false;
        document.getElementById('approvalRef').hidden = false;
        document.getElementById('NotAcceptedate').hidden = true;
        document.getElementById('cbRetired').hidden = false;
        var sosiinfo = document.getElementById('sosiinfo');
        if (typeof (sosiinfo) != 'undefined' && sosiinfo != null) {
            document.getElementById('sosiinfo').hidden = false;
        }
    }


</script>
}

@section breadcrumb {
    <li><a href="@Model.GetObjectUrl()">@Model.NameTranslated()</a></li>
    <li>@Shared.Edit</li>
}
<section class="heading">
    <div class="row">
        <div class="col-sm-12">
            <h2>
                @Shared.Edit @Model.NameTranslated()
            </h2>
        </div>
        <div class="col-sm-12">
            <span class="separator-lg"></span>
        </div>
    </div>
</section>
<p id="registerName">Register: @Model.register.NameTranslated()</p>
<p>Versjons id: @Model.versionNumber</p>

<form action="@Request.Url.LocalPath" method="post" enctype="multipart/form-data">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.systemId)
    @Html.HiddenFor(model => model.registerId)
    @Html.HiddenFor(model => model.versionNumber)
    @Html.HiddenFor(model => model.versioningId)
    @Html.HiddenFor(model => model.statusId)

    <div class="form-horizontal">
        @if (Request.IsAuthenticated)
        {
            if (Model.statusId == "Submitted" || Model.statusId == "Draft")
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessage("ErrorMessage")
                    </div>
                </div>

                for (int t = 0; t < Model.Translations.Count; t++)
                {
                    @Html.HiddenFor(m => Model.Translations[t].CultureName)
                    <div class="form-group">
                        @Html.LabelFor(m => Model.Translations[t].Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => Model.Translations[t].Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(m => Model.Translations[t].Name)
                        </div>
                    </div>
                }

                <div class="form-group">
                    @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
                    </div>
                </div>

                for (int t = 0; t < Model.Translations.Count; t++)
                {
                    @Html.HiddenFor(m => Model.Translations[t].CultureName)
                    <div class="form-group">
                        @Html.LabelFor(m => Model.Translations[t].Description, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => Model.Translations[t].Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(m => Model.Translations[t].Description)
                        </div>
                    </div>
                }

                <div class="form-group">
                    @Html.LabelFor(model => model.versionName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.versionName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.versionName, "", new { @class = "text-danger" })
                    </div>
                </div>

                if (Model.register.seoname == "gml-applikasjonsskjema")
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.DatasetUuid, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("DatasetUuid", null, Alerts.Select, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.DatasetUuid, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }

                <div class="form-group">
                    @Html.LabelFor(model => model.submitterId, Registers.Submitter + ":", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("submitterId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.submitterId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.documentownerId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("documentownerId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.documentownerId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.documentUrl, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="file" name="documentfile" id="documentfile" onchange="checkDocumentApproval($('#documentfile').val())" />@Model.documentUrl
                        @Html.ValidationMessageFor(model => model.documentUrl, "", new { @class = "text-danger" })
                        @Html.ValidationMessage("ErrorMessageFileName")
                        <br /><input type="checkbox" name="zipIsAsciiDoc" id="zipIsAsciiDoc" value="1" /><label for="zipIsAsciiDoc">&nbsp;Zip er AsciiDoc med eventuelt pdf-dokument</label>
                    </div>
                </div>

                <div class="form-group@(Model.register.seoname == "gml-applikasjonsskjema" ? " hidden" :"")">
                    @Html.LabelFor(model => model.documentUrlEnglish, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="file" name="documentfileEnglish" id="documentfileEnglish" />@Model.documentUrlEnglish
                        @Html.ValidationMessageFor(model => model.documentUrlEnglish, "", new { @class = "text-danger" })
                        @Html.ValidationMessage("ErrorMessageFileName")
                        <input type="checkbox" name="zipIsAsciiDocEnglish" id="zipIsAsciiDocEnglish" value="1" /><label for="zipIsAsciiDocEnglish">&nbsp;Zip er AsciiDoc</label>
                    </div>
                </div>

                <div class="form-group@(Model.register.seoname != "gml-applikasjonsskjema" ? " hidden" :"")">
                    <label for="schematronfile" class="control-label col-md-2">Schematron-fil</label>
                    <div class="col-md-10">
                        <input type="file" name="schematronfile" id="schematronfile" onchange="checkDocumentApproval($('#documentfile').val())" />@Model.documentUrlSchematron
                        @Html.ValidationMessageFor(model => model.documentUrlSchematron, "", new { @class = "text-danger" })
                        @Html.ValidationMessage("ErrorMessageFileName")
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.documentUrl2, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.documentUrl2, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.documentUrl2, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-2">@Registers.DocumentUrlAttachment</label>
                </div>
                <div class="form-group">
                    <label for="DocumentUrlAttachments[0].Url" class="control-label col-md-2">Url</label>
                    <div class="col-md-4">
                        <input type="text" value="@DocumentUrlAttachmentsUrl" name="DocumentUrlAttachments[0].Url" id="DocumentUrlAttachments[0].Url" />
                    </div>
                    <label for="DocumentUrlAttachments[0].Text" class="control-label col-md-2">@Shared.Title</label>
                    <div class="col-md-4">
                        <input type="text" value="@DocumentUrlAttachmentsText" name="DocumentUrlAttachments[0].Text" id="DocumentUrlAttachments[0].Text" />
                    </div>
                </div>
                for (int a = 1; a < Model.DocumentUrlAttachments.Count; a++)
                {
                    <div class="form-group">
                        <label for="DocumentUrlAttachments[@a].Url" class="control-label col-md-2">Url</label>
                        <div class="col-md-4">
                            <input type="text" value="@Model.DocumentUrlAttachments.ToArray()[a].Url" name="DocumentUrlAttachments[@a].Url" id="DocumentUrlAttachments[@a].Url" />
                        </div>
                        <label for="DocumentUrlAttachments[@a].Text" class="control-label col-md-2">@Shared.Title</label>
                        <div class="col-md-4">
                            <input type="text" value="@Model.DocumentUrlAttachments.ToArray()[a].Text" name="DocumentUrlAttachments[@a].Text" id="DocumentUrlAttachments[@a].Text" />
                        </div>
                    </div>
                }
                <div id="new-attachments">
                </div>
                <div>
                    <div class="form-group">
                        <div class="col-md-2"></div>
                        <div class="col-md-2"> <input type="button" value="Nytt vedlegg" onclick="addAttachment();" /></div>
                    </div>
                </div>
                <script>
                    var counter = @(Model.DocumentUrlAttachments != null ? Model.DocumentUrlAttachments.Count() : 1);
                    function addAttachment() {
                        document.getElementById("new-attachments").innerHTML +=
                            '<div class="form-group">' +
                        '<label for="DocumentUrlAttachments['+counter+'].Url" class="control-label col-md-2">Url</label>' +
                        '<div class="col-md-4">' +
                        '<input type="text" name="DocumentUrlAttachments[' + counter + '].Url" id="DocumentUrlAttachments[' + counter + '].Url" />' +
                        '</div > ' +
                            '<label for= "DocumentUrlAttachments['+counter+'].Text" class= "control-label col-md-2" >@Shared.Title</label > ' +
                            '<div class="col-md-4" > ' +
                            '<input type = "text" name = "DocumentUrlAttachments['+counter+'].Text" id = "DocumentUrlAttachments['+counter+'].Text" /> ' +
                        '</div > ' +
                    '</div>';
                        counter++;
                    }
                </script>
                <div class="form-group">
                    @Html.LabelFor(model => model.thumbnail, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="file" name="thumbnail" />@Model.thumbnail
                        @Html.ValidationMessageFor(model => model.thumbnail, "", new { @class = "text-danger" })
                    </div>
                </div>

                @Html.HiddenFor(model => model.thumbnail)
                @Html.HiddenFor(model => model.documentUrl)
                @Html.HiddenFor(model => model.documentUrl2)
                <hr />

            }
            else
            {
                @Html.HiddenFor(model => model.description)
                @Html.HiddenFor(model => model.versionName)
                @Html.HiddenFor(model => model.documentownerId)
                @Html.HiddenFor(model => model.thumbnail)
                @Html.HiddenFor(model => model.documentUrl)
                @Html.HiddenFor(model => model.submitterId)

                if (HtmlHelperExtensions.IsAdmin())
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessage("ErrorMessage")
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    if (Model.register.seoname == "gml-applikasjonsskjema")
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.DatasetUuid, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("DatasetUuid", null, Alerts.Select, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.DatasetUuid, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                }
                else
                {
                    @Html.HiddenFor(model => model.name)
                    @Html.HiddenFor(model => model.description)
                }

                for (int t = 0; t < Model.Translations.Count; t++)
                {
                    @Html.HiddenFor(m => Model.Translations[t].CultureName)
                    <div class="form-group">
                        @Html.LabelFor(m => Model.Translations[t].Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => Model.Translations[t].Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(m => Model.Translations[t].Name)
                        </div>
                    </div>
                }

                for (int t = 0; t < Model.Translations.Count; t++)
                {
                    @Html.HiddenFor(m => Model.Translations[t].CultureName)
                    <div class="form-group">
                        @Html.LabelFor(m => Model.Translations[t].Description, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => Model.Translations[t].Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(m => Model.Translations[t].Description)
                        </div>
                    </div>
                }

            }

            if (HtmlHelperExtensions.IsAdmin())
            {
                <div id="document-approval">
                    @Html.HiddenFor(model => model.documentownerId)
                    <br />
                    <h3>@Documents.DocumentApproval</h3>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Accepted, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-1">
                            @Html.RadioButtonFor(m => m.Accepted, "true", htmlAttributes: new { @onclick = "enable()", @id = "accepted" }) @Documents.Yes
                        </div>
                        <div class="col-md-1">
                            @Html.RadioButtonFor(m => m.Accepted, "false", htmlAttributes: new { @onclick = "disable()", @id = "not-accepted" }) @Documents.No
                        </div>
                        <div class="col-md-2" id="cbRetired">
                            <b>@Documents.But</b><span class="pull-right">@Html.CheckBox("retired", false, new { htmlAttributes = new { @class = "pull-right" } }) @Documents.Expired</span>
                        </div>
                    </div>
                </div>
                if (Model.register.name == "Tegneregler")
                {
                    <div class="form-group" id="approvalCartographyFile">
                        @Html.LabelFor(model => model.CartographyFile, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <select id="CartographyFile" name="CartographyFile" class="form-control" onchange="CheckOfficial(this.value);"></select>
                            @Html.HiddenFor(model => model.CartographyDetailsUrl)
                            @Html.ValidationMessageFor(model => model.CartographyFile, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                if (Model.register.name == "Produktspesifikasjoner")
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.documentUrl2, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.documentUrl2, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.documentUrl2, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group" id="sosiinfo">
                        @Html.Label("SOSI godkjent", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.CheckBox("sosi", HtmlHelperExtensions.SosiIsChecked(Model.statusId), new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               @id = "cbSosi",
                               @onload = "checksosi()"
                           }
                       }) SOSI godkjent
                            @Html.ValidationMessageFor(model => model.dateAccepted, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.UmlModelTreeStructureLink, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.UmlModelTreeStructureLink, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.UmlModelTreeStructureLink, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group" id="approvalApplicationSchema">
                        @Html.LabelFor(model => model.ApplicationSchema, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ApplicationSchema, new { htmlAttributes = new { @class = "form-control", @onchange = "GetGMLApplicationSchema();" } })
                            @Html.ValidationMessageFor(model => model.ApplicationSchema, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group" id="approvalGMLApplicationSchema">
                        @Html.LabelFor(model => model.GMLApplicationSchema, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.GMLApplicationSchema, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.GMLApplicationSchema, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                else
                {
                    @Html.Hidden("sosi", HtmlHelperExtensions.SosiIsChecked(Model.statusId))
                }

                <div class="form-group" id="approvalDate">
                    @Html.LabelFor(model => model.dateAccepted, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.dateAccepted, new { cssClass = "date" })
                        @Html.ValidationMessageFor(model => model.dateAccepted, "", new { @class = "text-danger" })
                    </div>
                </div>
                @Html.HiddenFor(model => model.dateAccepted)

                <div class="form-group" id="NotAcceptedate">
                    @Html.LabelFor(model => model.dateNotAccepted, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.dateNotAccepted, new { cssClass = "date" })
                        @Html.ValidationMessageFor(model => model.dateNotAccepted, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" id="approvalDoc">
                    @Html.LabelFor(model => model.approvalDocument, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.approvalDocument, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.approvalDocument, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" id="approvalRef">
                    @Html.LabelFor(model => model.approvalReference, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.approvalReference, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.approvalReference, "", new { @class = "text-danger" })
                    </div>
                </div>
                <hr />
            }
            else
            {
                @Html.Hidden("retired", false)
                @Html.Hidden("sosi", false)
            }
        }

    </div>
    <div class="form-group">
        <input type="submit" value="@Shared.Save" class="btn btn-default pull-right" />
        <a href="@Model.GetObjectUrl()">@Shared.Back</a>
    </div>
</form>
<script>
    function GetGMLApplicationSchema()
    {
        $.getJSON($("#ApplicationSchema").val(), function(result){
            console.log(result);
            $("#GMLApplicationSchema").val(result.pakke.targetNamespace + '/' + result.pakke.xsdDocument)
        });
    }

    var selectedCartograhyUrl = '@Model.CartographyDetailsUrl';

    var cartographyFiles;

    function GetCartographyFiles()
    {
        $.getJSON("@WebConfigurationManager.AppSettings["RegistryCartographyUrl"]api/kartografi", function(result){

            cartographyFiles = result;

            $('#CartographyFile').append(new Option("Vennligst velg", "" ));

            $.each(cartographyFiles, function (i, obj) {
                var uuid = obj.DatasetUuid;
                var dataText = obj.DatasetName;
                var url = '@WebConfigurationManager.AppSettings["RegistryCartographyUrl"]files/files?uuid=' + uuid;
                var dataValue = url;

                var selected = false;

                if (dataValue == selectedCartograhyUrl)
                {
                    selected = true;
                    $('#CartographyDetailsUrl').val(url);
                }
                if ($("#CartographyFile option[value='" + url + "']").length == 0)
                    $('#CartographyFile').append(new Option(dataText, dataValue, false, selected ));
            });

        });
    }


    function checkDocumentApproval(file)
    {
        if (file !== "") {
            document.getElementById('accepted').checked = false;
            init();
            $('#document-approval').hide()
        }
        else
            $('#document-approval').show()

    }

    function CheckOfficial(value)
    {
        console.log(value);
        selectedCartograhyUrl = value;
        if (selectedCartograhyUrl == '')
            $('#CartographyDetailsUrl').val('');

        var checkedFile = false;

        $.each(cartographyFiles, function(i, obj) {

           var uuid = obj.DatasetUuid;
           var url = '@WebConfigurationManager.AppSettings["RegistryCartographyUrl"]files/files?uuid=' + uuid;

            if (url == selectedCartograhyUrl)
            {
                $('#CartographyDetailsUrl').val('@WebConfigurationManager.AppSettings["RegistryCartographyUrl"]files/files?uuid=' + obj.DatasetUuid);

                if(obj.OfficialStatus){  
                    console.log("Official")
                    $('#not-accepted').prop('checked', false);
                    $('#accepted').prop('checked', true);
                    checkedFile = true;
                }
            }
            
        });

        if(!checkedFile){
            console.log("not official");
            $('#accepted').prop('checked', false);
            $('#not-accepted').prop('checked', true);
        }
    }

    GetCartographyFiles();
</script>

