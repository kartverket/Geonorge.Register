@model Kartverket.Register.Models.GeoDataCollection
@using Kartverket.Register.Resources;
<script src="https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js"></script>
<!-- Editor's Dependecy Style -->
<link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/codemirror.min.css" />
<!-- Editor's Style -->
<link rel="stylesheet" href="https://uicdn.toast.com/editor/latest/toastui-editor.min.css" />
@{
    ViewBag.Title = Shared.Edit;
}

@section breadcrumb {
    <li><a href="/@GeodataCollection.RegisterSeoName">@GeodataCollection.RegisterName</a></li>
    <li><a href="/@GeodataCollection.RegisterSeoName/@Model.SeoName">@Model.Title</a></li>
    <li>@Shared.Edit</li>
}

<section class="heading">
    <div class="row">
        <div class="col-sm-12">
            <h2>
                @Shared.Edit @Model.Title
            </h2>
        </div>
        <div class="col-sm-12">
            <span class="separator-lg"></span>
        </div>
    </div>
</section>


@using (Html.BeginForm(
    "Edit", "GeoDataCollection", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
<div class="form-horizontal">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.systemId)

    <div class="form-group">
        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DatasetTitle, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DatasetTitle, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DatasetTitle, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.DatasetLink, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DatasetLink, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DatasetLink, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Organization, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("ownerId", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Organization, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.OtherOrganizationsInvolved, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.OtherOrganizationsInvolved, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.OtherOrganizationsInvolved, "", new { @class = "text-danger" })
        </div>
    </div>

    <h3>Aktører og roller</h3>


    <div class="form-group">
        @Html.LabelFor(model => model.Mapper, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Mapper, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Mapper, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.DataOwner, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DataOwner, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DataOwner, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Responsible, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("responsibleId", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Responsible, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Distributor, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Distributor, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Distributor, "", new { @class = "text-danger" })
        </div>
    </div>

    <h3>Leveranse- og mottaksordning</h3>

    <div class="form-group">
        @Html.LabelFor(model => model.Purpose, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.Purpose, 5, 100, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Purpose, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Methodology, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.HiddenFor(model => model.Methodology)
            @Html.ValidationMessageFor(model => model.Methodology, "", new { @class = "text-danger" })
            <div id="editorMethodology"></div>
            <script>

                                let hiddenBodyMarkdownMethodology = document.querySelector("#Methodology");
                                let onEditorUpdateMethodology = () => {
                                    hiddenBodyMarkdownMethodology.value = editorMethodology.getMarkdown();
                                }

                                var contentMethodology = [
                                @{
                                    string[] commentLines = new string[] { };
                                    if (Model.Methodology!= null) {
                                        commentLines = Model.Methodology.Split('\n');
                                    }
                                    foreach (var comment in commentLines)
                                    {
                                        @:'@comment.Replace("\r","")',
                                    }
                                }
                                ].join('\n');
                                const editorMethodology = new toastui.Editor({
                                    el: document.querySelector('#editorMethodology'),
                                    height: '150px',
                                    events: { "change": onEditorUpdateMethodology },
                                    initialValue: contentMethodology,
                                    initialEditType: 'wysiwyg'
                                });
            </script>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.RegistrationRequirements, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.HiddenFor(model => model.RegistrationRequirements)
            @Html.ValidationMessageFor(model => model.RegistrationRequirements, "", new { @class = "text-danger" })
            <div id="editorRegistrationRequirements"></div>
            <script>

                    let hiddenBodyMarkdownRegistrationRequirements = document.querySelector("#RegistrationRequirements");
                    let onEditorUpdateRegistrationRequirements = () => {
                        hiddenBodyMarkdownRegistrationRequirements.value = editorRegistrationRequirements.getMarkdown();
                                }

                    var contentRegistrationRequirements = [
                                @{
                                    commentLines = new string[] { };
                                    if (Model.RegistrationRequirements != null) {
                                        commentLines = Model.RegistrationRequirements.Split('\n');
                                    }
                                    foreach (var comment in commentLines)
                                    {
                                        @:'@comment.Replace("\r", "")',
                                    }
                                }
                                ].join('\n');
                    const editorRegistrationRequirements = new toastui.Editor({
                        el: document.querySelector('#editorRegistrationRequirements'),
                                    height: '150px',
                        events: { "change": onEditorUpdateRegistrationRequirements },
                        initialValue: contentRegistrationRequirements,
                                    initialEditType: 'wysiwyg'
                                });
            </script>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.LinkInfoPage, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LinkInfoPage, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LinkInfoPage, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ProcessHistory, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ProcessHistory, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ProcessHistory, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LinkToRequirementsForDelivery, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LinkToRequirementsForDelivery, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LinkToRequirementsForDelivery, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.LinkToMapSolution, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LinkToMapSolution, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LinkToMapSolution, "", new { @class = "text-danger" })
        </div>
    </div>

    <h3>Kartleggingsmetodikk</h3>
    <div class="form-group">
        @Html.LabelFor(model => model.MethodForMappingShort, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.MethodForMappingShort, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MethodForMappingShort, "", new { @class = "text-danger" })
        </div>
    </div>
   
    <div class="form-group">
        @Html.LabelFor(model => model.MappingRequirements, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.HiddenFor(model => model.MappingRequirements)
            @Html.ValidationMessageFor(model => model.MappingRequirements, "", new { @class = "text-danger" })
            <div id="editorMappingRequirements"></div>
            <script>

                    let hiddenBodyMarkdownMappingRequirements = document.querySelector("#MappingRequirements");
                    let onEditorUpdateMappingRequirements = () => {
                        hiddenBodyMarkdownMappingRequirements.value = editorMappingRequirements.getMarkdown();
                                }

                    var contentMappingRequirements = [
                                @{
                                    commentLines = new string[] { };
                                    if (Model.MappingRequirements != null) {
                                        commentLines = Model.MappingRequirements.Split('\n');
                                    }
                                    foreach (var comment in commentLines)
                                    {
                                        @:'@comment.Replace("\r", "")',
                                    }
                                }
                                ].join('\n');
                    const editorMappingRequirements = new toastui.Editor({
                        el: document.querySelector('#editorMappingRequirements'),
                                    height: '150px',
                        events: { "change": onEditorUpdateMappingRequirements },
                        initialValue: contentMappingRequirements,
                                    initialEditType: 'wysiwyg'
                                });
            </script>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Link, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Link, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Link, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.OtherWebInfoAboutMappingMethodology, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.OtherWebInfoAboutMappingMethodology, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.OtherWebInfoAboutMappingMethodology, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.MappingRequirementsLink, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.MappingRequirementsLink, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MappingRequirementsLink, "", new { @class = "text-danger" })
        </div>
    </div>

    <h3>Annen informasjon</h3>
    <div class="form-group">
        @Html.LabelFor(model => model.AidAndSubsidies, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.HiddenFor(model => model.AidAndSubsidies)
            @Html.ValidationMessageFor(model => model.AidAndSubsidies, "", new { @class = "text-danger" })
            <div id="editorAidAndSubsidies"></div>
            <script>

                                let hiddenBodyMarkdownAidAndSubsidies = document.querySelector("#AidAndSubsidies");
                                let onEditorUpdateAidAndSubsidies = () => {
                                    hiddenBodyMarkdownAidAndSubsidies.value = editorAidAndSubsidies.getMarkdown();
                                }

                                var contentAidAndSubsidies = [
                                @{
                                    string[] AidAndSubsidiesLines = new string[] { };
                                    if (Model.AidAndSubsidies != null) {
                                        AidAndSubsidiesLines = Model.AidAndSubsidies.Split('\n');
                                    }
                                    foreach (var comment in AidAndSubsidiesLines)
                                    {
                                        @:'@comment.Replace("\r","")',
                                    }
                                }
                                ].join('\n');
                                    const editorAidAndSubsidies = new toastui.Editor({
                                    el: document.querySelector('#editorAidAndSubsidies'),
                                    height: '150px',
                                    events: { "change": onEditorUpdateAidAndSubsidies },
                                    initialValue: contentAidAndSubsidies,
                                    initialEditType: 'wysiwyg'
                                });
            </script>
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.OtherInfo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.HiddenFor(model => model.OtherInfo)
            @Html.ValidationMessageFor(model => model.OtherInfo, "", new { @class = "text-danger" })
            <div id="editorOtherInfo"></div>
            <script>

                let hiddenBodyMarkdownOtherInfo = document.querySelector("#OtherInfo");
                let onEditorUpdateOtherInfo = () => {
                    hiddenBodyMarkdownOtherInfo.value = editorOtherInfo.getMarkdown();
                                }

                var contentOtherInfo = [
                                @{
                                    string[] OtherInfoLines = new string[] { };
                                    if (Model.OtherInfo != null) {
                                        OtherInfoLines = Model.OtherInfo.Split('\n');
                                    }
                                    foreach (var comment in OtherInfoLines)
                                    {
                                        @:'@comment.Replace("\r","")',
                                    }
                                }
                                ].join('\n');
                const editorOtherInfo = new toastui.Editor({
                    el: document.querySelector('#editorOtherInfo'),
                                    height: '150px',
                    events: { "change": onEditorUpdateOtherInfo },
                    initialValue: contentOtherInfo,
                                    initialEditType: 'wysiwyg'
                                });
            </script>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.LinkOtherInfo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LinkOtherInfo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LinkOtherInfo, "", new { @class = "text-danger" })
        </div>
    </div>




    <h3>Kontaktinfo</h3>

    <div class="form-group">
        @Html.LabelFor(model => model.OrganizationInfo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.OrganizationInfo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.OrganizationInfo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ContactEmail, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ContactEmail, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ContactEmail, "", new { @class = "text-danger" })
        </div>
    </div>







    <div class="form-group">
        @Html.LabelFor(model => model.ImageFileName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <input type="file" name="imagefile" />@Model.ImageFileName
            @Html.ValidationMessageFor(model => model.ImageFileName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <input type="submit" value="@Shared.Save" class="btn btn-default pull-right" />
        <a href="/@GeodataCollection.RegisterSeoName/@Model.SeoName">@Shared.Back</a>
    </div>
</div>
    }

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
