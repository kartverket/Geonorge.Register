@model Kartverket.Register.Models.GeoDataCollection
@using Kartverket.Register.Resources;
<script src="https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js"></script>
<!-- Editor's Dependecy Style -->
<link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/codemirror.min.css" />
<!-- Editor's Style -->
<link rel="stylesheet" href="https://uicdn.toast.com/editor/latest/toastui-editor.min.css" />
@{
    ViewBag.Title = Shared.Edit;
}

@section breadcrumb {
    <li><a href="/@GeodataCollection.RegisterSeoName">@GeodataCollection.RegisterName</a></li>
    <li><a href="/@GeodataCollection.RegisterSeoName/@Model.SeoName">@Model.Title</a></li>
    <li>@Shared.Edit</li>
}

<section class="heading">
    <div class="row">
        <div class="col-sm-12">
            <h2>
                @Shared.Edit @Model.Title
            </h2>
        </div>
        <div class="col-sm-12">
            <span class="separator-lg"></span>
        </div>
    </div>
</section>


@using (Html.BeginForm())
{
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.systemId)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DatasetTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DatasetTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DatasetTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DatasetLink, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DatasetLink, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DatasetLink, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Link, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Link, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Link, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Organization, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ownerId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Organization, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Mapper, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Mapper, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Mapper, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DataOwner, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DataOwner, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DataOwner, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Distributor, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Distributor, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Distributor, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Purpose, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Purpose, 5, 100, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Purpose, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Methodology, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.Methodology)
                @Html.ValidationMessageFor(model => model.Methodology, "", new { @class = "text-danger" })
                <div id="editorMethodology"></div>
                <script>

                                let hiddenBodyMarkdownMethodology = document.querySelector("#Methodology");
                                let onEditorUpdateMethodology = () => {
                                    hiddenBodyMarkdownMethodology.value = editorMethodology.getMarkdown();
                                }

                                var contentMethodology = [
                                @{
                                    string[] commentLines = new string[] { };
                                    if (Model.Methodology!= null) {
                                        commentLines = Model.Methodology.Split('\n');
                                    }
                                    foreach (var comment in commentLines)
                                    {
                                        @:'@comment',
                                    }
                                }
                                ].join('\n');
                                const editorMethodology = new toastui.Editor({
                                    el: document.querySelector('#editorMethodology'),
                                    height: '150px',
                                    events: { "change": onEditorUpdateMethodology },
                                    initialValue: contentMethodology,
                                    initialEditType: 'wysiwyg'
                                });
                </script>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProcessHistory, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.ProcessHistory)
                @Html.ValidationMessageFor(model => model.ProcessHistory, "", new { @class = "text-danger" })
                <div id="editorProcessHistory"></div>
                <script>

                    let hiddenBodyMarkdownProcessHistory = document.querySelector("#ProcessHistory");
                    let onEditorUpdateProcessHistory = () => {
                        hiddenBodyMarkdownProcessHistory.value = editorProcessHistory.getMarkdown();
                                }

                                var contentProcessHistory = [
                                @{
                                    commentLines = new string[] { };
                                    if (Model.ProcessHistory != null) {
                                        commentLines = Model.ProcessHistory.Split('\n');
                                    }
                                    foreach (var comment in commentLines)
                                    {
                                        @:'@comment',
                                    }
                                }
                                ].join('\n');
                    const editorProcessHistory = new toastui.Editor({
                        el: document.querySelector('#editorProcessHistory'),
                                    height: '150px',
                        events: { "change": onEditorUpdateProcessHistory },
                        initialValue: contentProcessHistory,
                                    initialEditType: 'wysiwyg'
                                });
                </script>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RegistrationRequirements, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.RegistrationRequirements)
                @Html.ValidationMessageFor(model => model.RegistrationRequirements, "", new { @class = "text-danger" })
                <div id="editorRegistrationRequirements"></div>
                <script>

                    let hiddenBodyMarkdownRegistrationRequirements = document.querySelector("#RegistrationRequirements");
                    let onEditorUpdateRegistrationRequirements = () => {
                        hiddenBodyMarkdownRegistrationRequirements.value = editorRegistrationRequirements.getMarkdown();
                                }

                    var contentRegistrationRequirements = [
                                @{
                                    commentLines = new string[] { };
                                    if (Model.RegistrationRequirements != null) {
                                        commentLines = Model.RegistrationRequirements.Split('\n');
                                    }
                                    foreach (var comment in commentLines)
                                    {
                                        @:'@comment',
                                    }
                                }
                                ].join('\n');
                    const editorRegistrationRequirements = new toastui.Editor({
                        el: document.querySelector('#editorRegistrationRequirements'),
                                    height: '150px',
                        events: { "change": onEditorUpdateRegistrationRequirements },
                        initialValue: contentRegistrationRequirements,
                                    initialEditType: 'wysiwyg'
                                });
                </script>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MappingRequirements, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.MappingRequirements)
                @Html.ValidationMessageFor(model => model.MappingRequirements, "", new { @class = "text-danger" })
                <div id="editorMappingRequirements"></div>
                <script>

                    let hiddenBodyMarkdownMappingRequirements = document.querySelector("#MappingRequirements");
                    let onEditorUpdateMappingRequirements = () => {
                        hiddenBodyMarkdownMappingRequirements.value = editorMappingRequirements.getMarkdown();
                                }

                    var contentMappingRequirements = [
                                @{
                                    commentLines = new string[] { };
                                    if (Model.MappingRequirements != null) {
                                        commentLines = Model.MappingRequirements.Split('\n');
                                    }
                                    foreach (var comment in commentLines)
                                    {
                                        @:'@comment',
                                    }
                                }
                                ].join('\n');
                    const editorMappingRequirements = new toastui.Editor({
                        el: document.querySelector('#editorMappingRequirements'),
                                    height: '150px',
                        events: { "change": onEditorUpdateMappingRequirements },
                        initialValue: contentMappingRequirements,
                                    initialEditType: 'wysiwyg'
                                });
                </script>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MethodologyDocumentLink, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MethodologyDocumentLink, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MethodologyDocumentLink, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MethodologyLinkWebPage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MethodologyLinkWebPage, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MethodologyLinkWebPage, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SupportSchemes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.SupportSchemes)
                @Html.ValidationMessageFor(model => model.SupportSchemes, "", new { @class = "text-danger" })
                <div id="editorSupportSchemes"></div>
                <script>

                    let hiddenBodyMarkdownSupportSchemes = document.querySelector("#SupportSchemes");
                    let onEditorUpdateSupportSchemes = () => {
                        hiddenBodyMarkdownSupportSchemes.value = editorSupportSchemes.getMarkdown();
                                }

                    var contentSupportSchemes = [
                                @{
                                    commentLines = new string[] { };
                                    if (Model.SupportSchemes != null) {
                                        commentLines = Model.SupportSchemes.Split('\n');
                                    }
                                    foreach (var comment in commentLines)
                                    {
                                        @:'@comment',
                                    }
                                }
                                ].join('\n');
                    const editorSupportSchemes = new toastui.Editor({
                        el: document.querySelector('#editorSupportSchemes'),
                                    height: '150px',
                        events: { "change": onEditorUpdateSupportSchemes },
                        initialValue: contentSupportSchemes,
                                    initialEditType: 'wysiwyg'
                                });
                </script>
            </div>
        </div>

        <div class="form-group">
            <input type="submit" value="@Shared.Save" class="btn btn-default pull-right" />
            <a href="/@GeodataCollection.RegisterSeoName/@Model.SeoName">@Shared.Back</a>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
