@model Kartverket.Register.Models.ViewModels.InspireRegistryStatusReportViewModel

<script>

    $(document).ready(function () {
        var parameterInspireDataServiceStatusType = getParameterByName("inspiredataservicestatustype");
        var parameterInspireDatasetStatusType = getParameterByName("inspiredatasetstatustype");

        var inspireDatasetStatusType = parameterInspireDatasetStatusType == "all" || parameterInspireDatasetStatusType == "";
        var inspireDataServiceStatusType = parameterInspireDataServiceStatusType == "all" || parameterInspireDataServiceStatusType == "";
        
        var selectedView = localStorage.getItem("SelectedViewButtons");

        var cbDatasetChecked = localStorage.getItem("cbToggleDataset");
        var cbDataServiceChecked = localStorage.getItem("cbToggleDataService");

        if (cbDataServiceChecked == null) {
            cbDataServiceChecked = "true";
        }
        if (cbDatasetChecked == null) {
            cbDatasetChecked = "true";
        }

        console.log(cbDatasetChecked);
        console.log(cbDataServiceChecked);

        if (cbDatasetChecked == "true") {
            document.getElementById("cbToggleDataset").checked = true;
        } else {
            document.getElementById("cbToggleDataset").checked = false;
        }
        if (cbDataServiceChecked == "true") {
            document.getElementById("cbToggleDataService").checked = true;
        } else {
            document.getElementById("cbToggleDataService").checked = false;
        }
        if (inspireDatasetStatusType) {
            ShowAllDatasetChart();
        } else {
            ShowStatusDatasetChart();
        }
        if (inspireDataServiceStatusType) {
            ShowAllDataServiceChart();
        } else {
            ShowStatusServiceChart();
        }
  
        reportView(selectedView, null);
        var cb = document.getElementById("cbExportReport");

        ToggleExportReport(cb);
        ToggleDataServiceReport(cbDataServiceChecked);
        ToggleDatasetReport(cbDatasetChecked);
    });

    function ToggleExportReport(cb) {
        if (cb.checked) {
            document.getElementById("ExportAll").style.display = "inline-block";
            document.getElementById("ExportSelected").style.display = "none";
        } else {
            document.getElementById("ExportAll").style.display = "none";
            document.getElementById("ExportSelected").style.display = "inline-block";
        }
    }

    function ExportDataset(dataset) {
        var esj = document.getElementById("ExportSelectedJson");
        var esc = document.getElementById("ExportSelectedCsv");
        var eaj = document.getElementById("ExportAllJson");
        var eac = document.getElementById("ExportAllCsv");

        var replaseText = "&dataset=" + !dataset;
        var replaseWith = "";

        esj.href = esj.href.replace(replaseText, replaseWith);
        esc.href = esc.href.replace(replaseText, replaseWith);
        eaj.href = eaj.href.replace(replaseText, replaseWith);
        eac.href = eac.href.replace(replaseText, replaseWith);

        esj.href += "&dataset=" + dataset;
        esc.href += "&dataset=" + dataset;
        eaj.href += "&dataset=" + dataset;
        eac.href += "&dataset=" + dataset;
    }

    function ExportService(service) {
        var esj = document.getElementById("ExportSelectedJson");
        var esc = document.getElementById("ExportSelectedCsv");
        var eaj = document.getElementById("ExportAllJson");
        var eac = document.getElementById("ExportAllCsv");

        var replaseText = "&service=" + !service;
        var replaseWith = "";

        esj.href = esj.href.replace(replaseText, replaseWith);
        esc.href = esc.href.replace(replaseText, replaseWith);
        eaj.href = eaj.href.replace(replaseText, replaseWith);
        eac.href = eac.href.replace(replaseText, replaseWith);

        esj.href += "&service=" + service;
        esc.href += "&service=" + service;
        eaj.href += "&service=" + service;
        eac.href += "&service=" + service;
    }

    function ToggleDatasetReport(checked) {
        var datasetCharts = document.getElementsByClassName("datasetChart");
        if (checked == "true") {
            for (var i = 0; i < datasetCharts.length; i++){
                datasetCharts[i].style.display = "inline-block";
            }
            ExportDataset(true);
            localStorage.setItem("cbToggleDataset", true);
            
        } else {
            for (var i = 0; i < datasetCharts.length; i++) {
                datasetCharts[i].style.display = "none";
            }
            ExportDataset(false);
            localStorage.setItem("cbToggleDataset", false);
        }
    }

    function ToggleDataServiceReport(checked) {
        var serviceChart = document.getElementsByClassName("serviceChart");
        if (checked == "true") {
            for (var i = 0; i < serviceChart.length; i++) {
                serviceChart[i].style.display = "inline-block";
            }
            ExportService(true);
            localStorage.setItem("cbToggleDataService", true);
        } else {
            for (var i = 0; i < serviceChart.length; i++) {
                serviceChart[i].style.display = "none";
            }
            ExportService(false);
            localStorage.setItem("cbToggleDataService", false);
        }
    }



    function reportView(view, event) {
        var buttons = $("#reportViewButtons button");
        $.each(buttons,
            function(index, btn) {
                $(btn).removeClass("button-selected");
                $(btn.children).removeClass("button-selected");
            });

        if (event != null) {
            event.target.classList.add("button-selected");
        }

            document.getElementById(view + "Button").classList.add("button-selected");


        var i;
        var x = document.getElementsByClassName("reportViewContent");
        for (i = 0; i < x.length; i++) {
            x[i].style.display = "none";
        }
        document.getElementById(view).style.display = "block";

        localStorage.setItem("SelectedViewButtons", view);
    }

    function ShowAllDatasetChart() {
        var chartAll = document.getElementById("lineChartAll");
        var chartStatus = document.getElementById("lineChartStatus");

        chartAll.style.display = "block";
        chartStatus.style.display = "none";

    }

    function ShowAllDataServiceChart() {
        var chartAll = document.getElementById("lineChartAllService");
        var chartStatus = document.getElementById("lineChartStatusService");

        chartAll.style.display = "block";
        chartStatus.style.display = "none";
    }

    
    function ShowStatusDatasetChart() {
        var chartAll = document.getElementById("lineChartAll");
        var chartStatus = document.getElementById("lineChartStatus");

        chartAll.style.display = "none";
        chartStatus.style.display = "block";
    }

    function ShowStatusServiceChart() {
        var chartAll = document.getElementById("lineChartAllService");
        var chartStatus = document.getElementById("lineChartStatusService");

        chartAll.style.display = "none";
        chartStatus.style.display = "block";
    }


    @{var javaScriptSerializer = new System.Web.Script.Serialization.JavaScriptSerializer(); }


    // *********** Inpsire dataset *************

    if (@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport))) != null) {


        // LINE CHART

        var ctx = document.getElementById("InspireDatasetLineChart").getContext('2d');
        var InspireDatasetLineChart = new Chart(ctx, {
        plugins: [{
            beforeDraw: function (InspireDatasetLineChart) {
                var ctx = InspireDatasetLineChart.chart.ctx;
                ctx.fillStyle = "white";
                ctx.fillRect(0, 0, InspireDatasetLineChart.chart.width, InspireDatasetLineChart.chart.height);
            }
        }],
        type: 'line',
        fill: false,
        data: {
            labels: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.Labels))),
            datasets: [
                {
                    label: "@InspireDataSet.Metadata",
                    borderColor: 'rgb(255, 0, 0)',
                    data:@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.Metadata))),
                    backgroundColor: "rgb(255, 0, 0)",
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                    fill: false
                },
                {
                    label: "@InspireDataSet.MetadataServiceStatus",
                    fill: false,
                    backgroundColor: 'rgb(240, 179, 35)',
                    borderColor: 'rgb(240, 179, 35)',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.MetadataService))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                },
                {
                    label: "@InspireDataSet.Distribution",
                    backgroundColor: "rgb(169, 196, 127)",
                    fill: false,
                    borderColor: 'rgb(169, 196, 127)',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.Distribution))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                },
                {
                    label: "@InspireDataSet.WmsStatus",
                    backgroundColor: "rgb(254, 80, 0)",
                    fill: false,
                    borderColor: 'rgb(254, 80, 0)',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.Wms))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                },
                {
                    label: "@InspireDataSet.WfsStatus",
                    backgroundColor: "rgb(125, 161, 196)",
                    fill: false,
                    borderColor: 'rgb(125, 161, 196)',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.Wfs))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                },
                {
                    label: "@InspireDataSet.WfsOrAtomStatus",
                    backgroundColor: "rgb(54, 197, 69)",
                    fill: false,
                    borderColor: 'rgb(54, 197, 69)',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.WfsOrAtomFeed))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                },
                {
                    label: "@InspireDataSet.AtomFeedStatus",
                    backgroundColor: "rgb(101, 126, 224)",
                    fill: false,
                    borderColor: 'rgb(101, 126, 224)',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.AtomFeed))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                },
                {
                    label: "@InspireDataSet.HarmonizedDataStatus",
                    backgroundColor: 'rgb(102, 153, 102)',
                    fill: false,
                    borderColor: 'rgb(102, 153, 102)',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.HarmonizedData))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                },
                {
                    label: "@InspireDataSet.SpatialDataServiceStatus",
                    backgroundColor: "rgb(0, 26, 0)",
                    fill: false,
                    borderColor: 'rgb(0, 26, 0)',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.SpatialDataService))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.LineChart.PointSize))),
                }
            ]
        }
    });
    }


    if (@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport))) != null) {


        // LINE CHART

        var ctx = document.getElementById("InspireDataServiceLineChart").getContext('2d');
        var InspireDataServiceLineChart = new Chart(ctx, {
        plugins: [{
            beforeDraw: function (InspireDataServiceLineChart) {
                var ctx = InspireDataServiceLineChart.chart.ctx;
                ctx.fillStyle = "white";
                ctx.fillRect(0, 0, InspireDataServiceLineChart.chart.width, InspireDataServiceLineChart.chart.height);
            }
        }],
        type: 'line',
        fill: false,
        data: {
            labels: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.LineChart.Labels))),
            datasets: [
                {
                    label: "@InspireDataSet.Metadata",
                    borderColor: 'rgb(255, 0, 0)',
                    data:@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.LineChart.Metadata))),
                    backgroundColor: "rgb(255, 0, 0)",
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.LineChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.LineChart.PointSize))),
                    fill: false
                },
                {
                    label: "@InspireDataSet.MetadataInSearchService",
                    fill: false,
                    backgroundColor: 'rgb(240, 179, 35)',
                    borderColor: 'rgb(240, 179, 35)',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.LineChart.MetadataSearchService))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.LineChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.LineChart.PointSize))),
                },
                {
                    label: "@InspireDataSet.ServiceStatus",
                    backgroundColor: "rgb(169, 196, 127)",
                    fill: false,
                    borderColor: 'rgb(169, 196, 127)',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.LineChart.Servicestatus))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.LineChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.LineChart.PointSize))),
                },
                {
                    label: "@InspireDataSet.SpatialDataServiceStatus",
                    backgroundColor: "rgb(254, 80, 0)",
                    fill: false,
                    borderColor: 'rgb(254, 80, 0)',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.LineChart.Sds))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.LineChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.LineChart.PointSize))),
                },
                {
                    label: "@InspireDataSet.NetworkService",
                    backgroundColor: "rgb(125, 161, 196)",
                    fill: false,
                    borderColor: 'rgb(125, 161, 196)',
                    data:
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.LineChart.NetworkService))),
                    pointRadius:
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.LineChart.PointSize))),
                    pointHoverRadius:
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.LineChart.PointSize))),
                    }
                ]
            }
        });
    }


    var ctx = document.getElementById("LineChartStatus").getContext('2d');
    var LineChartStatus = new Chart(ctx,
        {
            type: 'line',
            fill: false,
            data: {
                labels: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.StatusChart.Labels))),
            datasets: [
                {
                    label: "@DataSet.DOK_Delivery_Status_Good",
                    borderColor: '#36c545',
                    data:@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.StatusChart.Good))),
                    backgroundColor: "#36c545",
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.StatusChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.StatusChart.PointSize))),
                    fill: false
                },
                {
                    label: "@DataSet.DOK_Delivery_Status_Useable",
                    fill: false,
                    backgroundColor: '#fed633',
                    borderColor: '#fed633',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.StatusChart.Useable))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.StatusChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.StatusChart.PointSize))),
                },
                {
                    label: "@DataSet.DOK_Delivery_Status_Deficient",
                    backgroundColor: "#ee432a",
                    fill: false,
                    borderColor: '#ee432a',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.StatusChart.Deficient))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.StatusChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.StatusChart.PointSize))),
                },
                {
                    label: "@DataSet.DOK_Delivery_Status_NotSet",
                    backgroundColor: "#d8d8d8",
                    fill: false,
                    borderColor: '#d8d8d8',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.StatusChart.Notset))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.StatusChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.StatusChart.PointSize))),
                }
            ]
        }
        });

    var ctx = document.getElementById("LineChartStatusInspireDataService").getContext('2d');
    var LineChartStatusInspireDataService = new Chart(ctx,
        {
            type: 'line',
            fill: false,
            data: {
                labels: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.StatusChart.Labels))),
            datasets: [
                {
                    label: "@DataSet.DOK_Delivery_Status_Good",
                    borderColor: '#36c545',
                    data:@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.StatusChart.Good))),
                    backgroundColor: "#36c545",
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.StatusChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.StatusChart.PointSize))),
                    fill: false
                },
                {
                    label: "@DataSet.DOK_Delivery_Status_Useable",
                    fill: false,
                    backgroundColor: '#fed633',
                    borderColor: '#fed633',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.StatusChart.Useable))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.StatusChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.StatusChart.PointSize))),
                },
                {
                    label: "@DataSet.DOK_Delivery_Status_Deficient",
                    backgroundColor: "#ee432a",
                    fill: false,
                    borderColor: '#ee432a',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.StatusChart.Deficient))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.StatusChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.StatusChart.PointSize))),
                },
                {
                    label: "@DataSet.DOK_Delivery_Status_NotSet",
                    backgroundColor: "#d8d8d8",
                    fill: false,
                    borderColor: '#d8d8d8',
                    data: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.StatusChart.Notset))),
                    pointRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.StatusChart.PointSize))),
                    pointHoverRadius: @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.StatusChart.PointSize))),
                }
            ]
        }
    });

    // DATA
    var legendPie = {
        display: true,
        position: 'right',
        labels: {
            generateLabels: function (chart) {
                var data = chart.data;
                if (data.labels.length && data.datasets.length) {
                    return data.labels.map(function (label, i) {
                        var meta = chart.getDatasetMeta(0);
                        var ds = data.datasets[0];
                        var arc = meta.data[i];
                        var custom = arc && arc.custom || {};
                        var getValueAtIndexOrDefault = Chart.helpers.getValueAtIndexOrDefault;
                        var arcOpts = chart.options.elements.arc;
                        var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                        var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                        var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);

                        // We get the value of the current label
                        var value = chart.config.data.datasets[arc._datasetIndex].data[arc._index];

                        return {
                            // Instead of `text: label,`
                            // We add the value to the string
                            text: label + " : " + value,
                            fillStyle: fill,
                            strokeStyle: stroke,
                            lineWidth: bw,
                            hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
                            index: i
                        };
                    });
                } else {
                    return [];
                }
            }
        }
    }


    var dataMetadata = {
        labels: ["@DataSet.DOK_Delivery_Status_Good", "@DataSet.DOK_Delivery_Status_Useable", "@DataSet.DOK_Delivery_Status_Deficient", "@DataSet.DOK_Delivery_Status_NotSetShort"],
        datasets: [
            {
                fill: true,
                backgroundColor: ['#36c545', '#fed633', '#ee432a', '#d8d8d8'],
                data: [@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithMetadata.Good))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithMetadata.Useable))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithMetadata.Deficient))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithMetadata.Notset)))
                ],
            }
        ]
    };

    var dataMetadataService = {
        labels: ["@DataSet.DOK_Delivery_Status_Good", "@DataSet.DOK_Delivery_Status_Useable",
            "@DataSet.DOK_Delivery_Status_Deficient", "@DataSet.DOK_Delivery_Status_NotSetShort"
        ],
        datasets: [
            {
                fill: true,
                backgroundColor: ['#36c545', '#fed633', '#ee432a', '#d8d8d8'],
                data: [
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithMetadataService.Good))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithMetadataService.Useable))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithMetadataService.Deficient))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithMetadataService.Notset)))
                ],
            }
        ]
    };

    var dataDistribution = {
        labels: ["@DataSet.DOK_Delivery_Status_Good", "@DataSet.DOK_Delivery_Status_Useable", "@DataSet.DOK_Delivery_Status_Deficient", "@DataSet.DOK_Delivery_Status_NotSetShort"],
            datasets: [
                {
                    fill: true,
                    backgroundColor: ['#36c545', '#fed633', '#ee432a', '#d8d8d8'],
                    data: [@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithDistribution.Good))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithDistribution.Useable))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithDistribution.Deficient))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithDistribution.Notset)))],
                }
            ]
    };

    var dataWms = {
        labels: ["@DataSet.DOK_Delivery_Status_Good", "@DataSet.DOK_Delivery_Status_Useable", "@DataSet.DOK_Delivery_Status_Deficient", "@DataSet.DOK_Delivery_Status_NotSetShort"],
        datasets: [
            {
                fill: true,
                backgroundColor: ['#36c545', '#fed633', '#ee432a', '#d8d8d8'],
                data: [@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithWms.Good))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithWms.Useable))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithWms.Deficient))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithWms.Notset)))],
            }
        ]
    };

    var dataWfs = {
        labels: ["@DataSet.DOK_Delivery_Status_Good", "@DataSet.DOK_Delivery_Status_Useable", "@DataSet.DOK_Delivery_Status_Deficient", "@DataSet.DOK_Delivery_Status_NotSetShort"],
        datasets: [
            {
                fill: true,
                backgroundColor: ['#36c545', '#fed633', '#ee432a', '#d8d8d8'],
                data: [@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithWfs.Good))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithWfs.Useable))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithWfs.Deficient))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithWfs.Notset)))],
            }
        ]
    };

    var dataWfsOrAtom = {
        labels: ["@DataSet.DOK_Delivery_Status_Good", "@DataSet.DOK_Delivery_Status_Useable", "@DataSet.DOK_Delivery_Status_Deficient", "@DataSet.DOK_Delivery_Status_NotSetShort"],
        datasets: [
            {
                fill: true,
                backgroundColor: ['#36c545', '#fed633', '#ee432a', '#d8d8d8'],
                data: [@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithWfsOrAtom.Good))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithWfsOrAtom.Useable))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithWfsOrAtom.Deficient))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithWfsOrAtom.Notset)))],
            }
        ]
    };

    var dataAtomFeed = {
        labels: ["@DataSet.DOK_Delivery_Status_Good", "@DataSet.DOK_Delivery_Status_Useable", "@DataSet.DOK_Delivery_Status_Deficient", "@DataSet.DOK_Delivery_Status_NotSetShort"],
        datasets: [
            {
                fill: true,
                backgroundColor: ['#36c545', '#fed633', '#ee432a', '#d8d8d8'],
                data: [@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithAtomFeed.Good))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithAtomFeed.Useable))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithAtomFeed.Deficient))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithAtomFeed.Notset)))],
            }
        ]
    };

    var dataHarmonizedData = {
        labels: ["@DataSet.DOK_Delivery_Status_Good", "@DataSet.DOK_Delivery_Status_Useable", "@DataSet.DOK_Delivery_Status_Deficient", "@DataSet.DOK_Delivery_Status_NotSetShort"],
        datasets: [
            {
                fill: true,
                backgroundColor: ['#36c545', '#fed633', '#ee432a', '#d8d8d8'],
                data: [@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithHarmonizedData.Good))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithHarmonizedData.Useable))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithHarmonizedData.Deficient))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithHarmonizedData.Notset)))],
            }
        ]
    };

    var dataSpatialDataService = {
        labels: ["@DataSet.DOK_Delivery_Status_Good", "@DataSet.DOK_Delivery_Status_Useable", "@DataSet.DOK_Delivery_Status_Deficient", "@DataSet.DOK_Delivery_Status_NotSetShort"],
        datasets: [
            {
                fill: true,
                backgroundColor: ['#36c545', '#fed633', '#ee432a', '#d8d8d8'],
                data: [@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithSpatialDataService.Good))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithSpatialDataService.Useable))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithSpatialDataService.Deficient))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.NumberOfItemsWithSpatialDataService.Notset)))],
            }
        ]
    };

    var dataMetadataInspireDataService = {
        labels: ["@DataSet.DOK_Delivery_Status_Good", "@DataSet.DOK_Delivery_Status_Useable", "@DataSet.DOK_Delivery_Status_Deficient", "@DataSet.DOK_Delivery_Status_NotSetShort"],
        datasets: [
            {
                fill: true,
                backgroundColor: ['#36c545', '#fed633', '#ee432a', '#d8d8d8'],
                data: [@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.NumberOfItemsWithMetadata.Good))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.NumberOfItemsWithMetadata.Useable))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.NumberOfItemsWithMetadata.Deficient))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.NumberOfItemsWithMetadata.Notset)))],
            }
        ]
    };

    var dataMetadataSearchService = {
        labels: ["@DataSet.DOK_Delivery_Status_Good", "@DataSet.DOK_Delivery_Status_Useable", "@DataSet.DOK_Delivery_Status_Deficient", "@DataSet.DOK_Delivery_Status_NotSetShort"],
        datasets: [
            {
                fill: true,
                backgroundColor: ['#36c545', '#fed633', '#ee432a', '#d8d8d8'],
                data: [@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.NumberOfItemsWithMetadataInSearchService.Good))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.NumberOfItemsWithMetadataInSearchService.Useable))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.NumberOfItemsWithMetadataInSearchService.Deficient))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.NumberOfItemsWithMetadataInSearchService.Notset)))],
            }
        ]
    };

    var dataServiceStatus = {
        labels: ["@DataSet.DOK_Delivery_Status_Good", "@DataSet.DOK_Delivery_Status_Useable", "@DataSet.DOK_Delivery_Status_Deficient", "@DataSet.DOK_Delivery_Status_NotSetShort"],
        datasets: [
            {
                fill: true,
                backgroundColor: ['#36c545', '#fed633', '#ee432a', '#d8d8d8'],
                data: [@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.NumberOfItemsWithServiceStatus.Good))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.NumberOfItemsWithServiceStatus.Useable))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.NumberOfItemsWithServiceStatus.Deficient))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.NumberOfItemsWithServiceStatus.Notset)))],
            }
        ]
    };

    var dataSds = {
        labels: ["@Shared.Yes", "@Shared.No"],
        datasets: [
            {
                fill: true,
                backgroundColor: ['#36c545', '#ee432a'],
                data: [@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.NumberOfItemsWithSds))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.NumberOfItemsWithoutSds())))],
            }
        ]
    };

    var dataNetworkService = {
        labels: ["@Shared.Yes", "@Shared.No"],
        datasets: [
            {
                fill: true,
                backgroundColor: ['#36c545', '#ee432a'],
                data: [@Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.NumberOfItemsWithNetworkService))),
                    @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.NumberOfItemsWithoutNetworkService())))],
            }
        ]
    };

    // PIE CHART

    var ctx = document.getElementById("metadataPieChart").getContext('2d');
    var metadataPieChart = new Chart(ctx, {
        type: 'pie',
        data: dataMetadata,
        options: {
            responsive: true,
            legend: legendPie
            ,
            title: {
                display: true,
                text: '@InspireDataSet.Metadata',
                fontSize: 20
            },

        }
    });


    var ctx = document.getElementById("metadataServicePieChart").getContext('2d');
    var metadataServicePieChart = new Chart(ctx, {
        type: 'pie',
        data: dataMetadataService,
        options: {
            responsive: true,
            legend: legendPie,
            title: {
                display: true,
                text: '@InspireDataSet.MetadataServiceStatus',
                fontSize: 20
            }
        }
    });

    var ctx = document.getElementById("distributionPieChart").getContext('2d');
    var distributionPieChart = new Chart(ctx, {
        type: 'pie',
        data: dataDistribution,
        options: {
            responsive: true,
            legend: legendPie,
            title: {
                display: true,
                text: '@InspireDataSet.Distribution',
                fontSize: 20
            }
        }
    });

    var ctx = document.getElementById("WmsPieChart").getContext('2d');
    var WmsPieChart = new Chart(ctx, {
        type: 'pie',
        data: dataWms,
        options: {
            responsive: true,
            legend: legendPie,
            title: {
                display: true,
                text: '@InspireDataSet.WmsStatus',
                fontSize: 20
            }
        }
    });

    var ctx = document.getElementById("WfsPieChart").getContext('2d');
    var WfsPieChart = new Chart(ctx, {
        type: 'pie',
        data: dataWfs,
        options: {
            responsive: true,
            legend: legendPie,
            title: {
                display: true,
                text: '@InspireDataSet.WfsStatus',
                fontSize: 20
            }
        }
    });

    var ctx = document.getElementById("wfsOrAtomPieChart").getContext('2d');
    var wfsOrAtomPieChart = new Chart(ctx, {
        type: 'pie',
        data: dataWfsOrAtom,
        options: {
            responsive: true,
            legend: legendPie,
            title: {
                display: true,
                text: '@InspireDataSet.WfsOrAtomStatus',
                fontSize: 20
            }
        }
    });

    var ctx = document.getElementById("atomFeedPieChart").getContext('2d');
    var atomFeedPieChart = new Chart(ctx, {
        type: 'pie',
        data: dataAtomFeed,
        options: {
            responsive: true,
            legend: legendPie,
            title: {
                display: true,
                text: '@InspireDataSet.AtomFeedStatus',
                fontSize: 20
            }
        }
    });

    var ctx = document.getElementById("harmonizedDataPieChart").getContext('2d');
    var harmonizedDataPieChart = new Chart(ctx, {
        type: 'pie',
        data: dataHarmonizedData,
        options: {
            responsive: true,
            legend: legendPie,
            title: {
                display: true,
                text: '@InspireDataSet.HarmonizedDataStatus',
                fontSize: 20
            }
        }
    });

    var ctx = document.getElementById("spatialDataPieChart").getContext('2d');
    var spatialDataPieChart = new Chart(ctx, {
            type: 'pie',
        data: dataSpatialDataService,
            options: {
                responsive: true,
                legend: legendPie,
                title: {
                    display: true,
                    text: '@InspireDataSet.SpatialDataServiceStatus',
                    fontSize: 20
                }
            }
    });

    var ctx = document.getElementById("InspireDatasServiceMetadataPieChart").getContext('2d');
    var InspireDatasServiceMetadataPieChart = new Chart(ctx, {
        type: 'pie',
        data: dataMetadataInspireDataService,
        options: {
            responsive: true,
            legend: legendPie,
            title: {
                display: true,
                text: '@InspireDataSet.Metadata',
                fontSize: 20
            }
        }
    });

    var ctx = document.getElementById("InspireDatasServiceMetadatasearchServicePieChart").getContext('2d');
    var InspireDatasServiceMetadatasearchServicePieChart = new Chart(ctx, {
        type: 'pie',
        data: dataMetadataSearchService,
        options: {
            responsive: true,
            legend: legendPie,
            title: {
                display: true,
                text: '@InspireDataSet.MetadataInSearchService',
                fontSize: 20
            }
        }
    });

    var ctx = document.getElementById("InspireDatasServiceSearchServicePieChart").getContext('2d');
    var InspireDatasServiceSearchServicePieChart = new Chart(ctx, {
        type: 'pie',
        data: dataServiceStatus,
        options: {
            responsive: true,
            legend: legendPie,
            title: {
                display: true,
                text: '@InspireDataSet.ServiceStatus',
                fontSize: 20
            }
        }
    });

    var ctx = document.getElementById("InspireDatasSdsPieChart").getContext('2d');
    var InspireDatasSdsPieChart = new Chart(ctx, {
        type: 'pie',
        data: dataSds,
        options: {
            responsive: true,
            legend: legendPie,
            title: {
                display: true,
                text: '@InspireDataSet.SpatialDataServiceStatus',
                fontSize: 20
            }
            
        }
    });

    var ctx = document.getElementById("InspireDatasNetworkServicePieChart").getContext('2d');
    var InspireDatasNetworkServicePieChart = new Chart(ctx, {
        type: 'pie',
        data: dataNetworkService,
        options: {
            responsive: true,
            legend: legendPie,
            title: {
                display: true,
                text: '@InspireDataSet.NetworkService',
                fontSize: 20
            }
        }
    });


    // BAR CHART

    var ctx = document.getElementById("InspireServiceStatusBarChart").getContext('2d');
    var InspireServiceStatusBarChart = new Chart(ctx, {
        type: 'horizontalBar',
        data: {
            labels: [
                '@InspireDataSet.Metadata',
                '@InspireDataSet.MetadataInSearchService',
                '@InspireDataSet.ServiceStatus',
                '@InspireDataSet.SpatialDataServiceStatus',
                '@InspireDataSet.NetworkService',
            ],
            datasets: [
                {
                    label: '@DataSet.DOK_Delivery_Status_Good',
                    data: [
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.Percent(Model.InspireDataserviceStatusReport.NumberOfItemsWithMetadata.Good)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.Percent(Model.InspireDataserviceStatusReport.NumberOfItemsWithMetadataInSearchService.Good)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.Percent(Model.InspireDataserviceStatusReport.NumberOfItemsWithServiceStatus.Good)))),
                        0,
                        0,
                    ],
                    backgroundColor: '#36c545',
                },
                {
                    label: '@DataSet.DOK_Delivery_Status_Useable',
                    data: [
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.Percent(Model.InspireDataserviceStatusReport.NumberOfItemsWithMetadata.Useable)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.Percent(Model.InspireDataserviceStatusReport.NumberOfItemsWithMetadataInSearchService.Useable)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.Percent(Model.InspireDataserviceStatusReport.NumberOfItemsWithServiceStatus.Useable)))),
                        0,
                        0
                    ],
                    backgroundColor: '#fed633',
                },
                {
                    label: '@DataSet.DOK_Delivery_Status_Deficient',
                    data: [
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.Percent(Model.InspireDataserviceStatusReport.NumberOfItemsWithMetadata.Deficient)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.Percent(Model.InspireDataserviceStatusReport.NumberOfItemsWithMetadataInSearchService.Deficient)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.Percent(Model.InspireDataserviceStatusReport.NumberOfItemsWithServiceStatus.Deficient)))),
                        0,
                        0
                    ],
                    backgroundColor: '#ee432a',
                },
                {
                    label: '@DataSet.DOK_Delivery_Status_NotSetShort',
                    data: [
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.Percent(Model.InspireDataserviceStatusReport.NumberOfItemsWithMetadata.Notset)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.Percent(Model.InspireDataserviceStatusReport.NumberOfItemsWithMetadataInSearchService.Notset)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.Percent(Model.InspireDataserviceStatusReport.NumberOfItemsWithServiceStatus.Notset)))),
                        0,
                        0
                    ],
                    backgroundColor: '#d8d8d8',
                },
                {
                    label: '@Shared.Yes',
                    data: [
                        0,
                        0,
                        0,
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.Percent(Model.InspireDataserviceStatusReport.NumberOfItemsWithSds)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.Percent(Model.InspireDataserviceStatusReport.NumberOfItemsWithNetworkService))))
                    ],
                    backgroundColor: '#36c545',
                },
                {
                    label: '@Shared.No',
                    data: [
                        0,
                        0,
                        0,
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.Percent(Model.InspireDataserviceStatusReport.NumberOfItemsWithoutSds())))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDataserviceStatusReport.Percent(Model.InspireDataserviceStatusReport.NumberOfItemsWithoutNetworkService()))))
                    ],
                    backgroundColor: '#ee432a',
                }
            ]
        },
        options: {
            maintainAspectRatio: false,
            label: {
                width:1000
            },
            scales: {
                xAxes: [
                    {
                        ticks: {
                            beginAtZero: true,
                            steps: 10,
                            stepValue: 5,
                            max: 100,
                            callback: function(value, index, values) {
                                return value + " %";
                            }
                        },
                        scaleLabel: {
                            display: true,
                        },
                        stacked: true,
                    }
                ],
                yAxes: [
                    {
                        stacked: true,
                        barThickness: 40,
                        categoryPercentage: 0.9,
                       
                    }]
            },
            tooltips: {
                enabled: true,
                mode: 'single',
                callbacks: {
                    label: function (tooltipItems, data) {
                        return tooltipItems.yLabel + ': ' + tooltipItems.xLabel + ' %';
                    }
                }
            },
        }
    });

    var ctx = document.getElementById("statusBarChart").getContext('2d');
    var InspireDatasetStatusBarChart = new Chart(ctx, {
        type: 'horizontalBar',
        data: {
            labels: [
                '@InspireDataSet.Metadata',
                '@InspireDataSet.MetadataServiceStatus',
                '@InspireDataSet.DistributionStatus',
                '@InspireDataSet.WmsStatus',
                '@InspireDataSet.WfsStatus',
                '@InspireDataSet.WfsOrAtomStatus',
                '@InspireDataSet.AtomFeedStatus',
                '@InspireDataSet.HarmonizedDataStatus',
                '@InspireDataSet.SpatialDataServiceStatus',
            ],
            datasets: [
                {
                    label: '@DataSet.DOK_Delivery_Status_Good',
                    data: [
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithMetadata.Good)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithMetadataService.Good)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithDistribution.Good)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithWms.Good)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithWfs.Good)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithWfsOrAtom.Good)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithAtomFeed.Good)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithHarmonizedData.Good)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithSpatialDataService.Good)))),
                    ],
                    backgroundColor: '#36c545',
                },
                {
                    label: '@DataSet.DOK_Delivery_Status_Useable',
                    data: [
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithMetadata.Useable)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithMetadataService.Useable)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithDistribution.Useable)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithWms.Useable)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithWfs.Useable)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithWfsOrAtom.Useable)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithAtomFeed.Useable)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithHarmonizedData.Useable)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithSpatialDataService.Useable)))),
                    ],
                    backgroundColor: '#fed633',
                },
                {
                    label: '@DataSet.DOK_Delivery_Status_Deficient',
                    data: [
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithMetadata.Deficient)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithMetadataService.Deficient)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithDistribution.Deficient)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithWms.Deficient)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithWfs.Deficient)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithWfsOrAtom.Deficient)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithAtomFeed.Deficient)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithHarmonizedData.Deficient)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithSpatialDataService.Deficient)))),
                    ],
                    backgroundColor: '#ee432a',
                },
                {
                    label: '@DataSet.DOK_Delivery_Status_NotSet',
                    data: [
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithMetadata.Notset)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithMetadataService.Notset)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithDistribution.Notset)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithWms.Notset)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithWfs.Notset)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithWfsOrAtom.Notset)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithAtomFeed.Notset)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithHarmonizedData.Notset)))),
                        @Html.Raw(HttpUtility.HtmlDecode(javaScriptSerializer.Serialize(Model.InspireDatasetStatusReport.Percent(Model.InspireDatasetStatusReport.NumberOfItemsWithSpatialDataService.Notset)))),
                    ],
                    backgroundColor: '#d8d8d8',
                }
            ]
        },
        options: {
            scales: {
                xAxes: [
                    {
                        ticks: {
                            beginAtZero: true,
                            steps: 10,
                            stepValue: 5,
                            max: 100,
                            callback: function(value, index, values) {
                                return value + " %";
                            }
                        },
                        scaleLabel: {
                            display: true,
                        },
                        stacked: true,
                    }],
                yAxes: [{ stacked: true }]
            },
            tooltips: {
                enabled: true,
                mode: 'single',
                callbacks: {
                    label: function (tooltipItems, data) {
                        return tooltipItems.yLabel + ': ' + tooltipItems.xLabel + ' %';
                    }
                }
            },
        }
    });



</script>
