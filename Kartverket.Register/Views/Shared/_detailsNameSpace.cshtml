@using Kartverket.Register.Helpers;
@model Kartverket.Register.Models.NameSpace

<article class="col-md-12">
    @if (Model.description == null)
    {
        <p title="@Namespace.NoContentFor @Model.name."><strong>@Namespace.Service: </strong>@Registers.NotSet</p>
    }
    else
    {
        <p title="@Namespace.LinkToContentOf @Model.name"><strong>@Namespace.Content: </strong><a href="@Model.description">@Shared.Details <i class="custom-icon-sm custom-icon-eksternlink"></i></a></p>
    }

    @if (Model.serviceUrl == null)
    {
        <p title="@Namespace.UrlOfServiceNotSpecified"><strong>@Namespace.Service: </strong>@Registers.NotSet</p>
    }
    else
    {
        <p title="@Namespace.URLForServiceInNamespace @Model.name"><strong>@Namespace.Service: </strong><a href="@Model.serviceUrl">@Shared.Details <i class="custom-icon-sm custom-icon-eksternlink"></i></a></p>
    }


</article>
<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.min.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<div id="app">
    <div class="container">
        <div class="section data-search-filter-container">
            <input v-model="searchInput" v-bind:placeholder="getSearchInputPlaceholder()" class="data-search-filter" />
            <img src="/dist/images/search_icon-01.svg" alt="search">
        </div>
        <div class="section" is="metadata" v-bind:load-all-api-data="loadAllApiData"></div>
    </div>
</div>

<script type="text/x-template" id="metadata-template">
    <div>
        <div v-if="items && filteredItems.length" class="list">
            <h3 v-on:click="expanded = !expanded" class="section-title clickable">
                <span class="expand-arrow clickable" style="vertical-align: middle;" v-bind:class="{active: expanded}"></span>
                Dataset ({{ getCounter() }})
            </h3>
            <div v-show="expanded">
                <div class="list-header d-none d-md-block">
                    <div class="row">
                        <div class="col-md-4">
                            <b>Metadatanavn</b>
                        </div>
                        <div class="col-md-4">
                            <b>Organisasjon</b>
                        </div>
                        <div class="col-md-4">
                            <b>Datasett-id</b>
                        </div>
                    </div>
                </div>
                <div class="list-content" v-bind:class="{'loading-data': loadingData}">
                    <div v-for="item in filteredItems" class="list-item">
                        <div class="row">
                            <div class="col-md-4">
                                <a v-bind:href="item.ShowDetailsUrl" v-bind:title="'Vis detaljer for ' + item.DatasetName">{{item.Title}}</a>
                            </div>
                            <div class="col-md-4">
                                {{item.Organization}}
                            </div>
                            <div class="col-md-4">
                                {{item.DatasetName}}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="text-center">
                    <button v-show="moreItemsAvailable" v-on:click="getItems()" class="icon-button add-more-button" v-bind:class="loadingData ? 'fas fa-spinner fa-pulse' : 'fa fa-plus'"></button>
                </div>
            </div>
        </div>
    </div>
</script>

<script>
    var Metadata = {
        name: "Metadata",
        template: "#metadata-template",
        props: ['loadAllApiData'],
        data: function () {
            return {
                loadingData: false,
                expanded: true,
                items: null,
                numberOfVisibleItems: 0,
                filterProperties: [
                    'DatasetName',
                ]
            }
        },
        computed: {
            moreItemsAvailable: function () {
                if (this.loadAllApiData) {
                    return false;
                } else {
                    return this.items && this.items.NumFound > this.numberOfVisibleItems;
                }
            },
            filteredItems: function () {
                var filteredItems = [];
                if (this.loadAllApiData && this.$root.searchInput) {
                    this.items.Results.forEach(function (item) {
                        var itemHasMatch = false;
                        this.filterProperties.forEach(function (filterProperty) {
                            if (item[filterProperty].toUpperCase().indexOf(this.$root.searchInput.toUpperCase()) > -1) {
                                itemHasMatch = true;
                            }
                        }.bind(this));
                        if (itemHasMatch) {
                            filteredItems.push(item);
                        }
                    }.bind(this))
                } else {
                    filteredItems = this.items.Results;
                }
                return filteredItems;
            }
        },
        methods: {
            getItems: function () {
                var itemsPerRequest = 10;
                var offsetParameter = this.numberOfVisibleItems ? "&offset=" + (this.numberOfVisibleItems + 1) : "";
                var namespaceNameParameter = '?namespace=' + this.$root.Namespace;

                if (this.loadAllApiData && this.items) {
                    itemsPerRequest = this.items.NumFound;
                }
                var apiURL = this.loadAllApiData
                    ? "@Html.KartkatalogenUrl()api/datasets-namespace" + namespaceNameParameter + "&limit=" + itemsPerRequest
                    : "@Html.KartkatalogenUrl()api/datasets-namespace" + namespaceNameParameter + "&limit=" + itemsPerRequest + offsetParameter

                this.loadingData = true;
                Promise.resolve(this.$root.getApiData(apiURL))
                    .then((apiData) => {
                        this.loadingData = false;
                        if (!this.items || this.loadAllApiData) {
                            this.items = apiData;
                        }
                        else {
                            this.items.Results = this.items.Results.concat(apiData.Results);
                        }
                        this.numberOfVisibleItems += itemsPerRequest;
                    });
            },
            getCounter: function () {
                return this.loadAllApiData && this.$root.searchInput ? this.filteredItems.length : this.items.NumFound;
            }
        },
        mounted: function () {
            this.getItems();
        },
        watch: {
            loadAllApiData: function () {
                this.getItems();
            }
        }
    };

        var app = new Vue({
            el: '#app',
            components: {
                Metadata: Metadata,
            },
            data: function() {
                return {
                    Namespace: '@Server.UrlEncode(Model.name)',
                    ViewTitle: 'Dataset',
                    activeLanguage: this.getActiveLanguage(),
                    searchInput: '',
                    searchInputPlaceholder: {
                        en: 'Search dataset',
                        no: 'Søk i datasett her'
                    },
                    loadAllApiData: false
                }
            },
            methods: {
                getApiData: function (url) {
                    return axios.get(url, { headers: { 'Accept-Language': this.activeLanguage } })
                        .then(response => { return response.data; })
                        .catch(error => { throw error; });
                },
                getActiveLanguage: function () {
                    return Cookies.get('_culture') ? Cookies.get('_culture') : 'no';

                },
                getSearchInputPlaceholder: function () {
                    return this.searchInputPlaceholder[this.activeLanguage];
                }
            },
            watch: {
                searchInput: function (value) {
                    if (value) {
                        this.loadAllApiData = true;
                    }
                }
            }
        })
</script>
